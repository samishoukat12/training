var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import DebugNode from "./node";
const cache = [];
const MAX_LOGS = 100;
function Debug(namespace) {
  const debug = DebugNode(namespace, (...args) => {
    cache.push(args);
    if (cache.length > MAX_LOGS) {
      cache.shift();
    }
  });
  return debug;
}
__name(Debug, "Debug");
Debug.enable = (namespace) => {
  DebugNode.enable(namespace);
};
Debug.enabled = (namespace) => DebugNode.enabled(namespace);
function getLogs(numChars = 7500) {
  const output = cache.map((c) => c.map((item) => {
    if (typeof item === "string") {
      return item;
    }
    return JSON.stringify(item);
  }).join("  ")).join("\n");
  if (output.length < numChars) {
    return output;
  }
  return output.slice(-numChars);
}
__name(getLogs, "getLogs");
export {
  Debug,
  Debug as default,
  getLogs
};
