"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = (0, tslib_1.__importStar)(require("tslib"));
const crudResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = (0, tslib_1.__importStar)(require("./resolvers/crud/args.index"));
const actionResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = (0, tslib_1.__importStar)(require("./resolvers/relations/resolvers.index"));
const models = (0, tslib_1.__importStar)(require("./models"));
const outputTypes = (0, tslib_1.__importStar)(require("./resolvers/outputs"));
const inputTypes = (0, tslib_1.__importStar)(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    MyCourse: crudResolvers.MyCourseCrudResolver,
    MyCart: crudResolvers.MyCartCrudResolver,
    Category: crudResolvers.CategoryCrudResolver,
    Courses: crudResolvers.CoursesCrudResolver,
    Lectures: crudResolvers.LecturesCrudResolver,
    CourseBatches: crudResolvers.CourseBatchesCrudResolver,
    CourseAssignment: crudResolvers.CourseAssignmentCrudResolver,
    CourseQuiz: crudResolvers.CourseQuizCrudResolver,
    Speaker: crudResolvers.SpeakerCrudResolver,
    Events: crudResolvers.EventsCrudResolver,
    Faq: crudResolvers.FaqCrudResolver,
    SuccessStories: crudResolvers.SuccessStoriesCrudResolver,
    Blogs: crudResolvers.BlogsCrudResolver,
    Comments: crudResolvers.CommentsCrudResolver,
    ContactUs: crudResolvers.ContactUsCrudResolver,
    Attendence: crudResolvers.AttendenceCrudResolver,
    Fees: crudResolvers.FeesCrudResolver,
    EnrollmentApproval: crudResolvers.EnrollmentApprovalCrudResolver,
    Students: crudResolvers.StudentsCrudResolver,
    Staff: crudResolvers.StaffCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    MyCourse: {
        myCourse: actionResolvers.FindUniqueMyCourseResolver,
        findFirstMyCourse: actionResolvers.FindFirstMyCourseResolver,
        myCourses: actionResolvers.FindManyMyCourseResolver,
        createMyCourse: actionResolvers.CreateMyCourseResolver,
        createManyMyCourse: actionResolvers.CreateManyMyCourseResolver,
        deleteMyCourse: actionResolvers.DeleteMyCourseResolver,
        updateMyCourse: actionResolvers.UpdateMyCourseResolver,
        deleteManyMyCourse: actionResolvers.DeleteManyMyCourseResolver,
        updateManyMyCourse: actionResolvers.UpdateManyMyCourseResolver,
        upsertMyCourse: actionResolvers.UpsertMyCourseResolver,
        aggregateMyCourse: actionResolvers.AggregateMyCourseResolver,
        groupByMyCourse: actionResolvers.GroupByMyCourseResolver
    },
    MyCart: {
        myCart: actionResolvers.FindUniqueMyCartResolver,
        findFirstMyCart: actionResolvers.FindFirstMyCartResolver,
        myCarts: actionResolvers.FindManyMyCartResolver,
        createMyCart: actionResolvers.CreateMyCartResolver,
        createManyMyCart: actionResolvers.CreateManyMyCartResolver,
        deleteMyCart: actionResolvers.DeleteMyCartResolver,
        updateMyCart: actionResolvers.UpdateMyCartResolver,
        deleteManyMyCart: actionResolvers.DeleteManyMyCartResolver,
        updateManyMyCart: actionResolvers.UpdateManyMyCartResolver,
        upsertMyCart: actionResolvers.UpsertMyCartResolver,
        aggregateMyCart: actionResolvers.AggregateMyCartResolver,
        groupByMyCart: actionResolvers.GroupByMyCartResolver
    },
    Category: {
        category: actionResolvers.FindUniqueCategoryResolver,
        findFirstCategory: actionResolvers.FindFirstCategoryResolver,
        categories: actionResolvers.FindManyCategoryResolver,
        createCategory: actionResolvers.CreateCategoryResolver,
        createManyCategory: actionResolvers.CreateManyCategoryResolver,
        deleteCategory: actionResolvers.DeleteCategoryResolver,
        updateCategory: actionResolvers.UpdateCategoryResolver,
        deleteManyCategory: actionResolvers.DeleteManyCategoryResolver,
        updateManyCategory: actionResolvers.UpdateManyCategoryResolver,
        upsertCategory: actionResolvers.UpsertCategoryResolver,
        aggregateCategory: actionResolvers.AggregateCategoryResolver,
        groupByCategory: actionResolvers.GroupByCategoryResolver
    },
    Courses: {
        findUniqueCourses: actionResolvers.FindUniqueCoursesResolver,
        findFirstCourses: actionResolvers.FindFirstCoursesResolver,
        findManyCourses: actionResolvers.FindManyCoursesResolver,
        createCourses: actionResolvers.CreateCoursesResolver,
        createManyCourses: actionResolvers.CreateManyCoursesResolver,
        deleteCourses: actionResolvers.DeleteCoursesResolver,
        updateCourses: actionResolvers.UpdateCoursesResolver,
        deleteManyCourses: actionResolvers.DeleteManyCoursesResolver,
        updateManyCourses: actionResolvers.UpdateManyCoursesResolver,
        upsertCourses: actionResolvers.UpsertCoursesResolver,
        aggregateCourses: actionResolvers.AggregateCoursesResolver,
        groupByCourses: actionResolvers.GroupByCoursesResolver
    },
    Lectures: {
        findUniqueLectures: actionResolvers.FindUniqueLecturesResolver,
        findFirstLectures: actionResolvers.FindFirstLecturesResolver,
        findManyLectures: actionResolvers.FindManyLecturesResolver,
        createLectures: actionResolvers.CreateLecturesResolver,
        createManyLectures: actionResolvers.CreateManyLecturesResolver,
        deleteLectures: actionResolvers.DeleteLecturesResolver,
        updateLectures: actionResolvers.UpdateLecturesResolver,
        deleteManyLectures: actionResolvers.DeleteManyLecturesResolver,
        updateManyLectures: actionResolvers.UpdateManyLecturesResolver,
        upsertLectures: actionResolvers.UpsertLecturesResolver,
        aggregateLectures: actionResolvers.AggregateLecturesResolver,
        groupByLectures: actionResolvers.GroupByLecturesResolver
    },
    CourseBatches: {
        findUniqueCourseBatches: actionResolvers.FindUniqueCourseBatchesResolver,
        findFirstCourseBatches: actionResolvers.FindFirstCourseBatchesResolver,
        findManyCourseBatches: actionResolvers.FindManyCourseBatchesResolver,
        createCourseBatches: actionResolvers.CreateCourseBatchesResolver,
        createManyCourseBatches: actionResolvers.CreateManyCourseBatchesResolver,
        deleteCourseBatches: actionResolvers.DeleteCourseBatchesResolver,
        updateCourseBatches: actionResolvers.UpdateCourseBatchesResolver,
        deleteManyCourseBatches: actionResolvers.DeleteManyCourseBatchesResolver,
        updateManyCourseBatches: actionResolvers.UpdateManyCourseBatchesResolver,
        upsertCourseBatches: actionResolvers.UpsertCourseBatchesResolver,
        aggregateCourseBatches: actionResolvers.AggregateCourseBatchesResolver,
        groupByCourseBatches: actionResolvers.GroupByCourseBatchesResolver
    },
    CourseAssignment: {
        courseAssignment: actionResolvers.FindUniqueCourseAssignmentResolver,
        findFirstCourseAssignment: actionResolvers.FindFirstCourseAssignmentResolver,
        courseAssignments: actionResolvers.FindManyCourseAssignmentResolver,
        createCourseAssignment: actionResolvers.CreateCourseAssignmentResolver,
        createManyCourseAssignment: actionResolvers.CreateManyCourseAssignmentResolver,
        deleteCourseAssignment: actionResolvers.DeleteCourseAssignmentResolver,
        updateCourseAssignment: actionResolvers.UpdateCourseAssignmentResolver,
        deleteManyCourseAssignment: actionResolvers.DeleteManyCourseAssignmentResolver,
        updateManyCourseAssignment: actionResolvers.UpdateManyCourseAssignmentResolver,
        upsertCourseAssignment: actionResolvers.UpsertCourseAssignmentResolver,
        aggregateCourseAssignment: actionResolvers.AggregateCourseAssignmentResolver,
        groupByCourseAssignment: actionResolvers.GroupByCourseAssignmentResolver
    },
    CourseQuiz: {
        courseQuiz: actionResolvers.FindUniqueCourseQuizResolver,
        findFirstCourseQuiz: actionResolvers.FindFirstCourseQuizResolver,
        courseQuizs: actionResolvers.FindManyCourseQuizResolver,
        createCourseQuiz: actionResolvers.CreateCourseQuizResolver,
        createManyCourseQuiz: actionResolvers.CreateManyCourseQuizResolver,
        deleteCourseQuiz: actionResolvers.DeleteCourseQuizResolver,
        updateCourseQuiz: actionResolvers.UpdateCourseQuizResolver,
        deleteManyCourseQuiz: actionResolvers.DeleteManyCourseQuizResolver,
        updateManyCourseQuiz: actionResolvers.UpdateManyCourseQuizResolver,
        upsertCourseQuiz: actionResolvers.UpsertCourseQuizResolver,
        aggregateCourseQuiz: actionResolvers.AggregateCourseQuizResolver,
        groupByCourseQuiz: actionResolvers.GroupByCourseQuizResolver
    },
    Speaker: {
        speaker: actionResolvers.FindUniqueSpeakerResolver,
        findFirstSpeaker: actionResolvers.FindFirstSpeakerResolver,
        speakers: actionResolvers.FindManySpeakerResolver,
        createSpeaker: actionResolvers.CreateSpeakerResolver,
        createManySpeaker: actionResolvers.CreateManySpeakerResolver,
        deleteSpeaker: actionResolvers.DeleteSpeakerResolver,
        updateSpeaker: actionResolvers.UpdateSpeakerResolver,
        deleteManySpeaker: actionResolvers.DeleteManySpeakerResolver,
        updateManySpeaker: actionResolvers.UpdateManySpeakerResolver,
        upsertSpeaker: actionResolvers.UpsertSpeakerResolver,
        aggregateSpeaker: actionResolvers.AggregateSpeakerResolver,
        groupBySpeaker: actionResolvers.GroupBySpeakerResolver
    },
    Events: {
        findUniqueEvents: actionResolvers.FindUniqueEventsResolver,
        findFirstEvents: actionResolvers.FindFirstEventsResolver,
        findManyEvents: actionResolvers.FindManyEventsResolver,
        createEvents: actionResolvers.CreateEventsResolver,
        createManyEvents: actionResolvers.CreateManyEventsResolver,
        deleteEvents: actionResolvers.DeleteEventsResolver,
        updateEvents: actionResolvers.UpdateEventsResolver,
        deleteManyEvents: actionResolvers.DeleteManyEventsResolver,
        updateManyEvents: actionResolvers.UpdateManyEventsResolver,
        upsertEvents: actionResolvers.UpsertEventsResolver,
        aggregateEvents: actionResolvers.AggregateEventsResolver,
        groupByEvents: actionResolvers.GroupByEventsResolver
    },
    Faq: {
        faq: actionResolvers.FindUniqueFaqResolver,
        findFirstFaq: actionResolvers.FindFirstFaqResolver,
        faqs: actionResolvers.FindManyFaqResolver,
        createFaq: actionResolvers.CreateFaqResolver,
        createManyFaq: actionResolvers.CreateManyFaqResolver,
        deleteFaq: actionResolvers.DeleteFaqResolver,
        updateFaq: actionResolvers.UpdateFaqResolver,
        deleteManyFaq: actionResolvers.DeleteManyFaqResolver,
        updateManyFaq: actionResolvers.UpdateManyFaqResolver,
        upsertFaq: actionResolvers.UpsertFaqResolver,
        aggregateFaq: actionResolvers.AggregateFaqResolver,
        groupByFaq: actionResolvers.GroupByFaqResolver
    },
    SuccessStories: {
        findUniqueSuccessStories: actionResolvers.FindUniqueSuccessStoriesResolver,
        findFirstSuccessStories: actionResolvers.FindFirstSuccessStoriesResolver,
        findManySuccessStories: actionResolvers.FindManySuccessStoriesResolver,
        createSuccessStories: actionResolvers.CreateSuccessStoriesResolver,
        createManySuccessStories: actionResolvers.CreateManySuccessStoriesResolver,
        deleteSuccessStories: actionResolvers.DeleteSuccessStoriesResolver,
        updateSuccessStories: actionResolvers.UpdateSuccessStoriesResolver,
        deleteManySuccessStories: actionResolvers.DeleteManySuccessStoriesResolver,
        updateManySuccessStories: actionResolvers.UpdateManySuccessStoriesResolver,
        upsertSuccessStories: actionResolvers.UpsertSuccessStoriesResolver,
        aggregateSuccessStories: actionResolvers.AggregateSuccessStoriesResolver,
        groupBySuccessStories: actionResolvers.GroupBySuccessStoriesResolver
    },
    Blogs: {
        findUniqueBlogs: actionResolvers.FindUniqueBlogsResolver,
        findFirstBlogs: actionResolvers.FindFirstBlogsResolver,
        findManyBlogs: actionResolvers.FindManyBlogsResolver,
        createBlogs: actionResolvers.CreateBlogsResolver,
        createManyBlogs: actionResolvers.CreateManyBlogsResolver,
        deleteBlogs: actionResolvers.DeleteBlogsResolver,
        updateBlogs: actionResolvers.UpdateBlogsResolver,
        deleteManyBlogs: actionResolvers.DeleteManyBlogsResolver,
        updateManyBlogs: actionResolvers.UpdateManyBlogsResolver,
        upsertBlogs: actionResolvers.UpsertBlogsResolver,
        aggregateBlogs: actionResolvers.AggregateBlogsResolver,
        groupByBlogs: actionResolvers.GroupByBlogsResolver
    },
    Comments: {
        findUniqueComments: actionResolvers.FindUniqueCommentsResolver,
        findFirstComments: actionResolvers.FindFirstCommentsResolver,
        findManyComments: actionResolvers.FindManyCommentsResolver,
        createComments: actionResolvers.CreateCommentsResolver,
        createManyComments: actionResolvers.CreateManyCommentsResolver,
        deleteComments: actionResolvers.DeleteCommentsResolver,
        updateComments: actionResolvers.UpdateCommentsResolver,
        deleteManyComments: actionResolvers.DeleteManyCommentsResolver,
        updateManyComments: actionResolvers.UpdateManyCommentsResolver,
        upsertComments: actionResolvers.UpsertCommentsResolver,
        aggregateComments: actionResolvers.AggregateCommentsResolver,
        groupByComments: actionResolvers.GroupByCommentsResolver
    },
    ContactUs: {
        contactUs: actionResolvers.FindUniqueContactUsResolver,
        findFirstContactUs: actionResolvers.FindFirstContactUsResolver,
        contactuses: actionResolvers.FindManyContactUsResolver,
        createContactUs: actionResolvers.CreateContactUsResolver,
        createManyContactUs: actionResolvers.CreateManyContactUsResolver,
        deleteContactUs: actionResolvers.DeleteContactUsResolver,
        updateContactUs: actionResolvers.UpdateContactUsResolver,
        deleteManyContactUs: actionResolvers.DeleteManyContactUsResolver,
        updateManyContactUs: actionResolvers.UpdateManyContactUsResolver,
        upsertContactUs: actionResolvers.UpsertContactUsResolver,
        aggregateContactUs: actionResolvers.AggregateContactUsResolver,
        groupByContactUs: actionResolvers.GroupByContactUsResolver
    },
    Attendence: {
        attendence: actionResolvers.FindUniqueAttendenceResolver,
        findFirstAttendence: actionResolvers.FindFirstAttendenceResolver,
        attendences: actionResolvers.FindManyAttendenceResolver,
        createAttendence: actionResolvers.CreateAttendenceResolver,
        createManyAttendence: actionResolvers.CreateManyAttendenceResolver,
        deleteAttendence: actionResolvers.DeleteAttendenceResolver,
        updateAttendence: actionResolvers.UpdateAttendenceResolver,
        deleteManyAttendence: actionResolvers.DeleteManyAttendenceResolver,
        updateManyAttendence: actionResolvers.UpdateManyAttendenceResolver,
        upsertAttendence: actionResolvers.UpsertAttendenceResolver,
        aggregateAttendence: actionResolvers.AggregateAttendenceResolver,
        groupByAttendence: actionResolvers.GroupByAttendenceResolver
    },
    Fees: {
        findUniqueFees: actionResolvers.FindUniqueFeesResolver,
        findFirstFees: actionResolvers.FindFirstFeesResolver,
        findManyFees: actionResolvers.FindManyFeesResolver,
        createFees: actionResolvers.CreateFeesResolver,
        createManyFees: actionResolvers.CreateManyFeesResolver,
        deleteFees: actionResolvers.DeleteFeesResolver,
        updateFees: actionResolvers.UpdateFeesResolver,
        deleteManyFees: actionResolvers.DeleteManyFeesResolver,
        updateManyFees: actionResolvers.UpdateManyFeesResolver,
        upsertFees: actionResolvers.UpsertFeesResolver,
        aggregateFees: actionResolvers.AggregateFeesResolver,
        groupByFees: actionResolvers.GroupByFeesResolver
    },
    EnrollmentApproval: {
        enrollmentApproval: actionResolvers.FindUniqueEnrollmentApprovalResolver,
        findFirstEnrollmentApproval: actionResolvers.FindFirstEnrollmentApprovalResolver,
        enrollmentApprovals: actionResolvers.FindManyEnrollmentApprovalResolver,
        createEnrollmentApproval: actionResolvers.CreateEnrollmentApprovalResolver,
        createManyEnrollmentApproval: actionResolvers.CreateManyEnrollmentApprovalResolver,
        deleteEnrollmentApproval: actionResolvers.DeleteEnrollmentApprovalResolver,
        updateEnrollmentApproval: actionResolvers.UpdateEnrollmentApprovalResolver,
        deleteManyEnrollmentApproval: actionResolvers.DeleteManyEnrollmentApprovalResolver,
        updateManyEnrollmentApproval: actionResolvers.UpdateManyEnrollmentApprovalResolver,
        upsertEnrollmentApproval: actionResolvers.UpsertEnrollmentApprovalResolver,
        aggregateEnrollmentApproval: actionResolvers.AggregateEnrollmentApprovalResolver,
        groupByEnrollmentApproval: actionResolvers.GroupByEnrollmentApprovalResolver
    },
    Students: {
        findUniqueStudents: actionResolvers.FindUniqueStudentsResolver,
        findFirstStudents: actionResolvers.FindFirstStudentsResolver,
        findManyStudents: actionResolvers.FindManyStudentsResolver,
        createStudents: actionResolvers.CreateStudentsResolver,
        createManyStudents: actionResolvers.CreateManyStudentsResolver,
        deleteStudents: actionResolvers.DeleteStudentsResolver,
        updateStudents: actionResolvers.UpdateStudentsResolver,
        deleteManyStudents: actionResolvers.DeleteManyStudentsResolver,
        updateManyStudents: actionResolvers.UpdateManyStudentsResolver,
        upsertStudents: actionResolvers.UpsertStudentsResolver,
        aggregateStudents: actionResolvers.AggregateStudentsResolver,
        groupByStudents: actionResolvers.GroupByStudentsResolver
    },
    Staff: {
        findUniqueStaff: actionResolvers.FindUniqueStaffResolver,
        findFirstStaff: actionResolvers.FindFirstStaffResolver,
        findManyStaff: actionResolvers.FindManyStaffResolver,
        createStaff: actionResolvers.CreateStaffResolver,
        createManyStaff: actionResolvers.CreateManyStaffResolver,
        deleteStaff: actionResolvers.DeleteStaffResolver,
        updateStaff: actionResolvers.UpdateStaffResolver,
        deleteManyStaff: actionResolvers.DeleteManyStaffResolver,
        updateManyStaff: actionResolvers.UpdateManyStaffResolver,
        upsertStaff: actionResolvers.UpsertStaffResolver,
        aggregateStaff: actionResolvers.AggregateStaffResolver,
        groupByStaff: actionResolvers.GroupByStaffResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    MyCourse: ["myCourse", "findFirstMyCourse", "myCourses", "createMyCourse", "createManyMyCourse", "deleteMyCourse", "updateMyCourse", "deleteManyMyCourse", "updateManyMyCourse", "upsertMyCourse", "aggregateMyCourse", "groupByMyCourse"],
    MyCart: ["myCart", "findFirstMyCart", "myCarts", "createMyCart", "createManyMyCart", "deleteMyCart", "updateMyCart", "deleteManyMyCart", "updateManyMyCart", "upsertMyCart", "aggregateMyCart", "groupByMyCart"],
    Category: ["category", "findFirstCategory", "categories", "createCategory", "createManyCategory", "deleteCategory", "updateCategory", "deleteManyCategory", "updateManyCategory", "upsertCategory", "aggregateCategory", "groupByCategory"],
    Courses: ["findUniqueCourses", "findFirstCourses", "findManyCourses", "createCourses", "createManyCourses", "deleteCourses", "updateCourses", "deleteManyCourses", "updateManyCourses", "upsertCourses", "aggregateCourses", "groupByCourses"],
    Lectures: ["findUniqueLectures", "findFirstLectures", "findManyLectures", "createLectures", "createManyLectures", "deleteLectures", "updateLectures", "deleteManyLectures", "updateManyLectures", "upsertLectures", "aggregateLectures", "groupByLectures"],
    CourseBatches: ["findUniqueCourseBatches", "findFirstCourseBatches", "findManyCourseBatches", "createCourseBatches", "createManyCourseBatches", "deleteCourseBatches", "updateCourseBatches", "deleteManyCourseBatches", "updateManyCourseBatches", "upsertCourseBatches", "aggregateCourseBatches", "groupByCourseBatches"],
    CourseAssignment: ["courseAssignment", "findFirstCourseAssignment", "courseAssignments", "createCourseAssignment", "createManyCourseAssignment", "deleteCourseAssignment", "updateCourseAssignment", "deleteManyCourseAssignment", "updateManyCourseAssignment", "upsertCourseAssignment", "aggregateCourseAssignment", "groupByCourseAssignment"],
    CourseQuiz: ["courseQuiz", "findFirstCourseQuiz", "courseQuizs", "createCourseQuiz", "createManyCourseQuiz", "deleteCourseQuiz", "updateCourseQuiz", "deleteManyCourseQuiz", "updateManyCourseQuiz", "upsertCourseQuiz", "aggregateCourseQuiz", "groupByCourseQuiz"],
    Speaker: ["speaker", "findFirstSpeaker", "speakers", "createSpeaker", "createManySpeaker", "deleteSpeaker", "updateSpeaker", "deleteManySpeaker", "updateManySpeaker", "upsertSpeaker", "aggregateSpeaker", "groupBySpeaker"],
    Events: ["findUniqueEvents", "findFirstEvents", "findManyEvents", "createEvents", "createManyEvents", "deleteEvents", "updateEvents", "deleteManyEvents", "updateManyEvents", "upsertEvents", "aggregateEvents", "groupByEvents"],
    Faq: ["faq", "findFirstFaq", "faqs", "createFaq", "createManyFaq", "deleteFaq", "updateFaq", "deleteManyFaq", "updateManyFaq", "upsertFaq", "aggregateFaq", "groupByFaq"],
    SuccessStories: ["findUniqueSuccessStories", "findFirstSuccessStories", "findManySuccessStories", "createSuccessStories", "createManySuccessStories", "deleteSuccessStories", "updateSuccessStories", "deleteManySuccessStories", "updateManySuccessStories", "upsertSuccessStories", "aggregateSuccessStories", "groupBySuccessStories"],
    Blogs: ["findUniqueBlogs", "findFirstBlogs", "findManyBlogs", "createBlogs", "createManyBlogs", "deleteBlogs", "updateBlogs", "deleteManyBlogs", "updateManyBlogs", "upsertBlogs", "aggregateBlogs", "groupByBlogs"],
    Comments: ["findUniqueComments", "findFirstComments", "findManyComments", "createComments", "createManyComments", "deleteComments", "updateComments", "deleteManyComments", "updateManyComments", "upsertComments", "aggregateComments", "groupByComments"],
    ContactUs: ["contactUs", "findFirstContactUs", "contactuses", "createContactUs", "createManyContactUs", "deleteContactUs", "updateContactUs", "deleteManyContactUs", "updateManyContactUs", "upsertContactUs", "aggregateContactUs", "groupByContactUs"],
    Attendence: ["attendence", "findFirstAttendence", "attendences", "createAttendence", "createManyAttendence", "deleteAttendence", "updateAttendence", "deleteManyAttendence", "updateManyAttendence", "upsertAttendence", "aggregateAttendence", "groupByAttendence"],
    Fees: ["findUniqueFees", "findFirstFees", "findManyFees", "createFees", "createManyFees", "deleteFees", "updateFees", "deleteManyFees", "updateManyFees", "upsertFees", "aggregateFees", "groupByFees"],
    EnrollmentApproval: ["enrollmentApproval", "findFirstEnrollmentApproval", "enrollmentApprovals", "createEnrollmentApproval", "createManyEnrollmentApproval", "deleteEnrollmentApproval", "updateEnrollmentApproval", "deleteManyEnrollmentApproval", "updateManyEnrollmentApproval", "upsertEnrollmentApproval", "aggregateEnrollmentApproval", "groupByEnrollmentApproval"],
    Students: ["findUniqueStudents", "findFirstStudents", "findManyStudents", "createStudents", "createManyStudents", "deleteStudents", "updateStudents", "deleteManyStudents", "updateManyStudents", "upsertStudents", "aggregateStudents", "groupByStudents"],
    Staff: ["findUniqueStaff", "findFirstStaff", "findManyStaff", "createStaff", "createManyStaff", "deleteStaff", "updateStaff", "deleteManyStaff", "updateManyStaff", "upsertStaff", "aggregateStaff", "groupByStaff"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMyCourseArgs: ["where"],
    FindFirstMyCourseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMyCourseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMyCourseArgs: ["data"],
    CreateManyMyCourseArgs: ["data"],
    DeleteMyCourseArgs: ["where"],
    UpdateMyCourseArgs: ["data", "where"],
    DeleteManyMyCourseArgs: ["where"],
    UpdateManyMyCourseArgs: ["data", "where"],
    UpsertMyCourseArgs: ["where", "create", "update"],
    AggregateMyCourseArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMyCourseArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMyCartArgs: ["where"],
    FindFirstMyCartArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMyCartArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMyCartArgs: ["data"],
    CreateManyMyCartArgs: ["data"],
    DeleteMyCartArgs: ["where"],
    UpdateMyCartArgs: ["data", "where"],
    DeleteManyMyCartArgs: ["where"],
    UpdateManyMyCartArgs: ["data", "where"],
    UpsertMyCartArgs: ["where", "create", "update"],
    AggregateMyCartArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMyCartArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCategoryArgs: ["where"],
    FindFirstCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCategoryArgs: ["data"],
    CreateManyCategoryArgs: ["data"],
    DeleteCategoryArgs: ["where"],
    UpdateCategoryArgs: ["data", "where"],
    DeleteManyCategoryArgs: ["where"],
    UpdateManyCategoryArgs: ["data", "where"],
    UpsertCategoryArgs: ["where", "create", "update"],
    AggregateCategoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCategoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCoursesArgs: ["where"],
    FindFirstCoursesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCoursesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCoursesArgs: ["data"],
    CreateManyCoursesArgs: ["data"],
    DeleteCoursesArgs: ["where"],
    UpdateCoursesArgs: ["data", "where"],
    DeleteManyCoursesArgs: ["where"],
    UpdateManyCoursesArgs: ["data", "where"],
    UpsertCoursesArgs: ["where", "create", "update"],
    AggregateCoursesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCoursesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLecturesArgs: ["where"],
    FindFirstLecturesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLecturesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLecturesArgs: ["data"],
    CreateManyLecturesArgs: ["data"],
    DeleteLecturesArgs: ["where"],
    UpdateLecturesArgs: ["data", "where"],
    DeleteManyLecturesArgs: ["where"],
    UpdateManyLecturesArgs: ["data", "where"],
    UpsertLecturesArgs: ["where", "create", "update"],
    AggregateLecturesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLecturesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCourseBatchesArgs: ["where"],
    FindFirstCourseBatchesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCourseBatchesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCourseBatchesArgs: ["data"],
    CreateManyCourseBatchesArgs: ["data"],
    DeleteCourseBatchesArgs: ["where"],
    UpdateCourseBatchesArgs: ["data", "where"],
    DeleteManyCourseBatchesArgs: ["where"],
    UpdateManyCourseBatchesArgs: ["data", "where"],
    UpsertCourseBatchesArgs: ["where", "create", "update"],
    AggregateCourseBatchesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCourseBatchesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCourseAssignmentArgs: ["where"],
    FindFirstCourseAssignmentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCourseAssignmentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCourseAssignmentArgs: ["data"],
    CreateManyCourseAssignmentArgs: ["data"],
    DeleteCourseAssignmentArgs: ["where"],
    UpdateCourseAssignmentArgs: ["data", "where"],
    DeleteManyCourseAssignmentArgs: ["where"],
    UpdateManyCourseAssignmentArgs: ["data", "where"],
    UpsertCourseAssignmentArgs: ["where", "create", "update"],
    AggregateCourseAssignmentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCourseAssignmentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCourseQuizArgs: ["where"],
    FindFirstCourseQuizArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCourseQuizArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCourseQuizArgs: ["data"],
    CreateManyCourseQuizArgs: ["data"],
    DeleteCourseQuizArgs: ["where"],
    UpdateCourseQuizArgs: ["data", "where"],
    DeleteManyCourseQuizArgs: ["where"],
    UpdateManyCourseQuizArgs: ["data", "where"],
    UpsertCourseQuizArgs: ["where", "create", "update"],
    AggregateCourseQuizArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCourseQuizArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSpeakerArgs: ["where"],
    FindFirstSpeakerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySpeakerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSpeakerArgs: ["data"],
    CreateManySpeakerArgs: ["data"],
    DeleteSpeakerArgs: ["where"],
    UpdateSpeakerArgs: ["data", "where"],
    DeleteManySpeakerArgs: ["where"],
    UpdateManySpeakerArgs: ["data", "where"],
    UpsertSpeakerArgs: ["where", "create", "update"],
    AggregateSpeakerArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySpeakerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueEventsArgs: ["where"],
    FindFirstEventsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyEventsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateEventsArgs: ["data"],
    CreateManyEventsArgs: ["data"],
    DeleteEventsArgs: ["where"],
    UpdateEventsArgs: ["data", "where"],
    DeleteManyEventsArgs: ["where"],
    UpdateManyEventsArgs: ["data", "where"],
    UpsertEventsArgs: ["where", "create", "update"],
    AggregateEventsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByEventsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueFaqArgs: ["where"],
    FindFirstFaqArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyFaqArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateFaqArgs: ["data"],
    CreateManyFaqArgs: ["data"],
    DeleteFaqArgs: ["where"],
    UpdateFaqArgs: ["data", "where"],
    DeleteManyFaqArgs: ["where"],
    UpdateManyFaqArgs: ["data", "where"],
    UpsertFaqArgs: ["where", "create", "update"],
    AggregateFaqArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByFaqArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSuccessStoriesArgs: ["where"],
    FindFirstSuccessStoriesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySuccessStoriesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSuccessStoriesArgs: ["data"],
    CreateManySuccessStoriesArgs: ["data"],
    DeleteSuccessStoriesArgs: ["where"],
    UpdateSuccessStoriesArgs: ["data", "where"],
    DeleteManySuccessStoriesArgs: ["where"],
    UpdateManySuccessStoriesArgs: ["data", "where"],
    UpsertSuccessStoriesArgs: ["where", "create", "update"],
    AggregateSuccessStoriesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySuccessStoriesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueBlogsArgs: ["where"],
    FindFirstBlogsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyBlogsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateBlogsArgs: ["data"],
    CreateManyBlogsArgs: ["data"],
    DeleteBlogsArgs: ["where"],
    UpdateBlogsArgs: ["data", "where"],
    DeleteManyBlogsArgs: ["where"],
    UpdateManyBlogsArgs: ["data", "where"],
    UpsertBlogsArgs: ["where", "create", "update"],
    AggregateBlogsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByBlogsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCommentsArgs: ["where"],
    FindFirstCommentsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCommentsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCommentsArgs: ["data"],
    CreateManyCommentsArgs: ["data"],
    DeleteCommentsArgs: ["where"],
    UpdateCommentsArgs: ["data", "where"],
    DeleteManyCommentsArgs: ["where"],
    UpdateManyCommentsArgs: ["data", "where"],
    UpsertCommentsArgs: ["where", "create", "update"],
    AggregateCommentsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCommentsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueContactUsArgs: ["where"],
    FindFirstContactUsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyContactUsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateContactUsArgs: ["data"],
    CreateManyContactUsArgs: ["data"],
    DeleteContactUsArgs: ["where"],
    UpdateContactUsArgs: ["data", "where"],
    DeleteManyContactUsArgs: ["where"],
    UpdateManyContactUsArgs: ["data", "where"],
    UpsertContactUsArgs: ["where", "create", "update"],
    AggregateContactUsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByContactUsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAttendenceArgs: ["where"],
    FindFirstAttendenceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAttendenceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAttendenceArgs: ["data"],
    CreateManyAttendenceArgs: ["data"],
    DeleteAttendenceArgs: ["where"],
    UpdateAttendenceArgs: ["data", "where"],
    DeleteManyAttendenceArgs: ["where"],
    UpdateManyAttendenceArgs: ["data", "where"],
    UpsertAttendenceArgs: ["where", "create", "update"],
    AggregateAttendenceArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAttendenceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueFeesArgs: ["where"],
    FindFirstFeesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyFeesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateFeesArgs: ["data"],
    CreateManyFeesArgs: ["data"],
    DeleteFeesArgs: ["where"],
    UpdateFeesArgs: ["data", "where"],
    DeleteManyFeesArgs: ["where"],
    UpdateManyFeesArgs: ["data", "where"],
    UpsertFeesArgs: ["where", "create", "update"],
    AggregateFeesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByFeesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueEnrollmentApprovalArgs: ["where"],
    FindFirstEnrollmentApprovalArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyEnrollmentApprovalArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateEnrollmentApprovalArgs: ["data"],
    CreateManyEnrollmentApprovalArgs: ["data"],
    DeleteEnrollmentApprovalArgs: ["where"],
    UpdateEnrollmentApprovalArgs: ["data", "where"],
    DeleteManyEnrollmentApprovalArgs: ["where"],
    UpdateManyEnrollmentApprovalArgs: ["data", "where"],
    UpsertEnrollmentApprovalArgs: ["where", "create", "update"],
    AggregateEnrollmentApprovalArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByEnrollmentApprovalArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueStudentsArgs: ["where"],
    FindFirstStudentsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyStudentsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateStudentsArgs: ["data"],
    CreateManyStudentsArgs: ["data"],
    DeleteStudentsArgs: ["where"],
    UpdateStudentsArgs: ["data", "where"],
    DeleteManyStudentsArgs: ["where"],
    UpdateManyStudentsArgs: ["data", "where"],
    UpsertStudentsArgs: ["where", "create", "update"],
    AggregateStudentsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByStudentsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueStaffArgs: ["where"],
    FindFirstStaffArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyStaffArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateStaffArgs: ["data"],
    CreateManyStaffArgs: ["data"],
    DeleteStaffArgs: ["where"],
    UpdateStaffArgs: ["data", "where"],
    DeleteManyStaffArgs: ["where"],
    UpdateManyStaffArgs: ["data", "where"],
    UpsertStaffArgs: ["where", "create", "update"],
    AggregateStaffArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByStaffArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    User: relationResolvers.UserRelationsResolver,
    MyCourse: relationResolvers.MyCourseRelationsResolver,
    MyCart: relationResolvers.MyCartRelationsResolver,
    Category: relationResolvers.CategoryRelationsResolver,
    Courses: relationResolvers.CoursesRelationsResolver,
    Lectures: relationResolvers.LecturesRelationsResolver,
    CourseBatches: relationResolvers.CourseBatchesRelationsResolver,
    CourseAssignment: relationResolvers.CourseAssignmentRelationsResolver,
    CourseQuiz: relationResolvers.CourseQuizRelationsResolver,
    Speaker: relationResolvers.SpeakerRelationsResolver,
    Events: relationResolvers.EventsRelationsResolver,
    SuccessStories: relationResolvers.SuccessStoriesRelationsResolver,
    Blogs: relationResolvers.BlogsRelationsResolver,
    Comments: relationResolvers.CommentsRelationsResolver,
    Attendence: relationResolvers.AttendenceRelationsResolver,
    Fees: relationResolvers.FeesRelationsResolver
};
const relationResolversInfo = {
    User: ["courses", "myCart", "successStory", "myComments", "attendence", "fees", "myCourse"],
    MyCourse: ["courses", "student", "courseBatches"],
    MyCart: ["courses", "user"],
    Category: ["allCourses"],
    Courses: ["instructor", "courseCategory", "lectures", "totalBatches", "assignment", "courseQuiz", "enrollList", "cartList"],
    Lectures: ["courses"],
    CourseBatches: ["assignment", "quiz", "courses", "enrolledStudent"],
    CourseAssignment: ["CourseBatches", "courses"],
    CourseQuiz: ["courseBatches", "courses"],
    Speaker: ["events"],
    Events: ["Speaker"],
    SuccessStories: ["user"],
    Blogs: ["comments"],
    Comments: ["blogs", "User"],
    Attendence: ["user"],
    Fees: ["student"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    MyCourse: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    MyCart: ["id", "createdAt", "updateAt", "coursesId", "userId"],
    Category: ["id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    Courses: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice"],
    Lectures: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    CourseBatches: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseAssignment: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuiz: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    Speaker: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    Events: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    Faq: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    SuccessStories: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    Blogs: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    Comments: ["id", "blogsId", "createdAt", "comment", "userId"],
    ContactUs: ["id", "name", "subject", "message", "status", "reply"],
    Attendence: ["id", "attendence", "date", "userId"],
    Fees: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    EnrollmentApproval: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    Students: ["id", "name", "email", "status"],
    Staff: ["id", "name", "email", "role", "phone"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateMyCourse: ["_count", "_min", "_max"],
    MyCourseGroupBy: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId", "_count", "_min", "_max"],
    AggregateMyCart: ["_count", "_min", "_max"],
    MyCartGroupBy: ["id", "createdAt", "updateAt", "coursesId", "userId", "_count", "_min", "_max"],
    AggregateCategory: ["_count", "_min", "_max"],
    CategoryGroupBy: ["id", "categoryName", "imageUrl", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateCourses: ["_count", "_min", "_max"],
    CoursesGroupBy: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice", "_count", "_min", "_max"],
    AggregateLectures: ["_count", "_min", "_max"],
    LecturesGroupBy: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateCourseBatches: ["_count", "_min", "_max"],
    CourseBatchesGroupBy: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateCourseAssignment: ["_count", "_min", "_max"],
    CourseAssignmentGroupBy: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateCourseQuiz: ["_count", "_min", "_max"],
    CourseQuizGroupBy: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateSpeaker: ["_count", "_min", "_max"],
    SpeakerGroupBy: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateEvents: ["_count", "_min", "_max"],
    EventsGroupBy: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId", "_count", "_min", "_max"],
    AggregateFaq: ["_count", "_min", "_max"],
    FaqGroupBy: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateSuccessStories: ["_count", "_min", "_max"],
    SuccessStoriesGroupBy: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject", "_count", "_min", "_max"],
    AggregateBlogs: ["_count", "_min", "_max"],
    BlogsGroupBy: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType", "_count", "_min", "_max"],
    AggregateComments: ["_count", "_min", "_max"],
    CommentsGroupBy: ["id", "blogsId", "createdAt", "comment", "userId", "_count", "_min", "_max"],
    AggregateContactUs: ["_count", "_min", "_max"],
    ContactUsGroupBy: ["id", "name", "subject", "message", "status", "reply", "_count", "_min", "_max"],
    AggregateAttendence: ["_count", "_min", "_max"],
    AttendenceGroupBy: ["id", "attendence", "date", "userId", "_count", "_min", "_max"],
    AggregateFees: ["_count", "_min", "_max"],
    FeesGroupBy: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt", "_count", "_min", "_max"],
    AggregateEnrollmentApproval: ["_count", "_min", "_max"],
    EnrollmentApprovalGroupBy: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status", "_count", "_min", "_max"],
    AggregateStudents: ["_count", "_min", "_max"],
    StudentsGroupBy: ["id", "name", "email", "status", "_count", "_min", "_max"],
    AggregateStaff: ["_count", "_min", "_max"],
    StaffGroupBy: ["id", "name", "email", "role", "phone", "_count", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCount: ["courses", "myCart", "myComments", "attendence", "fees", "myCourse"],
    UserCountAggregate: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt", "_all"],
    UserMinAggregate: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    UserMaxAggregate: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    MyCourseCountAggregate: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId", "_all"],
    MyCourseMinAggregate: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    MyCourseMaxAggregate: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    MyCartCountAggregate: ["id", "createdAt", "updateAt", "coursesId", "userId", "_all"],
    MyCartMinAggregate: ["id", "createdAt", "updateAt", "coursesId", "userId"],
    MyCartMaxAggregate: ["id", "createdAt", "updateAt", "coursesId", "userId"],
    CategoryCount: ["allCourses"],
    CategoryCountAggregate: ["id", "categoryName", "imageUrl", "createdAt", "updateAt", "_all"],
    CategoryMinAggregate: ["id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    CategoryMaxAggregate: ["id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    CoursesCount: ["lectures", "totalBatches", "assignment", "courseQuiz", "enrollList", "cartList"],
    CoursesCountAggregate: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice", "_all"],
    CoursesMinAggregate: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "coursePrice"],
    CoursesMaxAggregate: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "coursePrice"],
    LecturesCountAggregate: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt", "_all"],
    LecturesMinAggregate: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    LecturesMaxAggregate: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    CourseBatchesCount: ["assignment", "quiz", "enrolledStudent"],
    CourseBatchesCountAggregate: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt", "_all"],
    CourseBatchesMinAggregate: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseBatchesMaxAggregate: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseAssignmentCountAggregate: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt", "_all"],
    CourseAssignmentMinAggregate: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseAssignmentMaxAggregate: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuizCountAggregate: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt", "_all"],
    CourseQuizMinAggregate: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuizMaxAggregate: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    SpeakerCount: ["events"],
    SpeakerCountAggregate: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt", "_all"],
    SpeakerMinAggregate: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    SpeakerMaxAggregate: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    EventsCountAggregate: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId", "_all"],
    EventsMinAggregate: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    EventsMaxAggregate: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    FaqCountAggregate: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt", "_all"],
    FaqMinAggregate: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    FaqMaxAggregate: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    SuccessStoriesCount: ["user"],
    SuccessStoriesCountAggregate: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject", "_all"],
    SuccessStoriesMinAggregate: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    SuccessStoriesMaxAggregate: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    BlogsCount: ["comments"],
    BlogsCountAggregate: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType", "_all"],
    BlogsMinAggregate: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    BlogsMaxAggregate: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    CommentsCountAggregate: ["id", "blogsId", "createdAt", "comment", "userId", "_all"],
    CommentsMinAggregate: ["id", "blogsId", "createdAt", "comment", "userId"],
    CommentsMaxAggregate: ["id", "blogsId", "createdAt", "comment", "userId"],
    ContactUsCountAggregate: ["id", "name", "subject", "message", "status", "reply", "_all"],
    ContactUsMinAggregate: ["id", "name", "subject", "message", "status", "reply"],
    ContactUsMaxAggregate: ["id", "name", "subject", "message", "status", "reply"],
    AttendenceCountAggregate: ["id", "attendence", "date", "userId", "_all"],
    AttendenceMinAggregate: ["id", "attendence", "date", "userId"],
    AttendenceMaxAggregate: ["id", "attendence", "date", "userId"],
    FeesCountAggregate: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt", "_all"],
    FeesMinAggregate: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    FeesMaxAggregate: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    EnrollmentApprovalCountAggregate: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status", "_all"],
    EnrollmentApprovalMinAggregate: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnrollmentApprovalMaxAggregate: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    StudentsCountAggregate: ["id", "name", "email", "status", "_all"],
    StudentsMinAggregate: ["id", "name", "email", "status"],
    StudentsMaxAggregate: ["id", "name", "email", "status"],
    StaffCountAggregate: ["id", "name", "email", "role", "phone", "_all"],
    StaffMinAggregate: ["id", "name", "email", "role", "phone"],
    StaffMaxAggregate: ["id", "name", "email", "role", "phone"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "attendence", "fees", "successStoriesId", "myCourse", "token", "createdAt", "updateAt"],
    UserOrderByWithRelationInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "attendence", "fees", "successStoriesId", "myCourse", "token", "createdAt", "updateAt"],
    UserWhereUniqueInput: ["id", "email"],
    UserOrderByWithAggregationInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    MyCourseWhereInput: ["AND", "OR", "NOT", "id", "courses", "coursesId", "student", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatches", "courseBatchesId"],
    MyCourseOrderByWithRelationInput: ["id", "courses", "coursesId", "student", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatches", "courseBatchesId"],
    MyCourseWhereUniqueInput: ["id", "coursesId_studentId"],
    MyCourseOrderByWithAggregationInput: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId", "_count", "_max", "_min"],
    MyCourseScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    MyCartWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updateAt", "courses", "coursesId", "user", "userId"],
    MyCartOrderByWithRelationInput: ["id", "createdAt", "updateAt", "courses", "coursesId", "user", "userId"],
    MyCartWhereUniqueInput: ["id"],
    MyCartOrderByWithAggregationInput: ["id", "createdAt", "updateAt", "coursesId", "userId", "_count", "_max", "_min"],
    MyCartScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updateAt", "coursesId", "userId"],
    CategoryWhereInput: ["AND", "OR", "NOT", "id", "categoryName", "allCourses", "imageUrl", "createdAt", "updateAt"],
    CategoryOrderByWithRelationInput: ["id", "categoryName", "allCourses", "imageUrl", "createdAt", "updateAt"],
    CategoryWhereUniqueInput: ["id", "categoryName"],
    CategoryOrderByWithAggregationInput: ["id", "categoryName", "imageUrl", "createdAt", "updateAt", "_count", "_max", "_min"],
    CategoryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    CoursesWhereInput: ["AND", "OR", "NOT", "id", "courseName", "courseDesc", "courseIntro", "instructor", "instructorId", "courseCategory", "courseCategoryId", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesOrderByWithRelationInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "instructorId", "courseCategory", "courseCategoryId", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesWhereUniqueInput: ["id"],
    CoursesOrderByWithAggregationInput: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice", "_count", "_max", "_min"],
    CoursesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice"],
    LecturesWhereInput: ["AND", "OR", "NOT", "id", "lectureTitle", "lectureVideo", "courses", "coursesId", "createdAt", "updateAt"],
    LecturesOrderByWithRelationInput: ["id", "lectureTitle", "lectureVideo", "courses", "coursesId", "createdAt", "updateAt"],
    LecturesWhereUniqueInput: ["id"],
    LecturesOrderByWithAggregationInput: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt", "_count", "_max", "_min"],
    LecturesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    CourseBatchesWhereInput: ["AND", "OR", "NOT", "id", "name", "assignment", "quiz", "courses", "coursesId", "courseName", "createdAt", "updateAt", "enrolledStudent"],
    CourseBatchesOrderByWithRelationInput: ["id", "name", "assignment", "quiz", "courses", "coursesId", "courseName", "createdAt", "updateAt", "enrolledStudent"],
    CourseBatchesWhereUniqueInput: ["id"],
    CourseBatchesOrderByWithAggregationInput: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt", "_count", "_max", "_min"],
    CourseBatchesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseAssignmentWhereInput: ["AND", "OR", "NOT", "id", "name", "CourseBatches", "courseBatchesId", "courses", "coursesId", "createdAt", "updateAt"],
    CourseAssignmentOrderByWithRelationInput: ["id", "name", "CourseBatches", "courseBatchesId", "courses", "coursesId", "createdAt", "updateAt"],
    CourseAssignmentWhereUniqueInput: ["id"],
    CourseAssignmentOrderByWithAggregationInput: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt", "_count", "_max", "_min"],
    CourseAssignmentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuizWhereInput: ["AND", "OR", "NOT", "id", "courseBatches", "courseBatchesId", "courses", "coursesId", "createdAt", "updateAt"],
    CourseQuizOrderByWithRelationInput: ["id", "courseBatches", "courseBatchesId", "courses", "coursesId", "createdAt", "updateAt"],
    CourseQuizWhereUniqueInput: ["id"],
    CourseQuizOrderByWithAggregationInput: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt", "_count", "_max", "_min"],
    CourseQuizScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    SpeakerWhereInput: ["AND", "OR", "NOT", "id", "speakerName", "spkearDesc", "spekaerImage", "events", "createdAt", "updateAt"],
    SpeakerOrderByWithRelationInput: ["id", "speakerName", "spkearDesc", "spekaerImage", "events", "createdAt", "updateAt"],
    SpeakerWhereUniqueInput: ["id"],
    SpeakerOrderByWithAggregationInput: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt", "_count", "_max", "_min"],
    SpeakerScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    EventsWhereInput: ["AND", "OR", "NOT", "id", "eventName", "eventDesc", "eventImage", "eventDate", "Speaker", "speakerId"],
    EventsOrderByWithRelationInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "Speaker", "speakerId"],
    EventsWhereUniqueInput: ["id"],
    EventsOrderByWithAggregationInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId", "_count", "_max", "_min"],
    EventsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    FaqWhereInput: ["AND", "OR", "NOT", "id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    FaqOrderByWithRelationInput: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    FaqWhereUniqueInput: ["id"],
    FaqOrderByWithAggregationInput: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt", "_count", "_max", "_min"],
    FaqScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    SuccessStoriesWhereInput: ["AND", "OR", "NOT", "id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject", "user"],
    SuccessStoriesOrderByWithRelationInput: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject", "user"],
    SuccessStoriesWhereUniqueInput: ["id"],
    SuccessStoriesOrderByWithAggregationInput: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject", "_count", "_max", "_min"],
    SuccessStoriesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    BlogsWhereInput: ["AND", "OR", "NOT", "id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType", "comments"],
    BlogsOrderByWithRelationInput: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType", "comments"],
    BlogsWhereUniqueInput: ["id"],
    BlogsOrderByWithAggregationInput: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType", "_count", "_max", "_min"],
    BlogsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    CommentsWhereInput: ["AND", "OR", "NOT", "id", "blogs", "blogsId", "createdAt", "comment", "User", "userId"],
    CommentsOrderByWithRelationInput: ["id", "blogs", "blogsId", "createdAt", "comment", "User", "userId"],
    CommentsWhereUniqueInput: ["id"],
    CommentsOrderByWithAggregationInput: ["id", "blogsId", "createdAt", "comment", "userId", "_count", "_max", "_min"],
    CommentsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "blogsId", "createdAt", "comment", "userId"],
    ContactUsWhereInput: ["AND", "OR", "NOT", "id", "name", "subject", "message", "status", "reply"],
    ContactUsOrderByWithRelationInput: ["id", "name", "subject", "message", "status", "reply"],
    ContactUsWhereUniqueInput: ["id"],
    ContactUsOrderByWithAggregationInput: ["id", "name", "subject", "message", "status", "reply", "_count", "_max", "_min"],
    ContactUsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "subject", "message", "status", "reply"],
    AttendenceWhereInput: ["AND", "OR", "NOT", "id", "attendence", "date", "user", "userId"],
    AttendenceOrderByWithRelationInput: ["id", "attendence", "date", "user", "userId"],
    AttendenceWhereUniqueInput: ["id", "userId_date"],
    AttendenceOrderByWithAggregationInput: ["id", "attendence", "date", "userId", "_count", "_max", "_min"],
    AttendenceScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "attendence", "date", "userId"],
    FeesWhereInput: ["AND", "OR", "NOT", "id", "amountPaid", "remainingAmount", "student", "studentId", "studentName", "createdAt", "updateAt"],
    FeesOrderByWithRelationInput: ["id", "amountPaid", "remainingAmount", "student", "studentId", "studentName", "createdAt", "updateAt"],
    FeesWhereUniqueInput: ["id"],
    FeesOrderByWithAggregationInput: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt", "_count", "_max", "_min"],
    FeesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    EnrollmentApprovalWhereInput: ["AND", "OR", "NOT", "id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnrollmentApprovalOrderByWithRelationInput: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnrollmentApprovalWhereUniqueInput: ["id", "email"],
    EnrollmentApprovalOrderByWithAggregationInput: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status", "_count", "_max", "_min"],
    EnrollmentApprovalScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    StudentsWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "status"],
    StudentsOrderByWithRelationInput: ["id", "name", "email", "status"],
    StudentsWhereUniqueInput: ["id", "email"],
    StudentsOrderByWithAggregationInput: ["id", "name", "email", "status", "_count", "_max", "_min"],
    StudentsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "email", "status"],
    StaffWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "role", "phone"],
    StaffOrderByWithRelationInput: ["id", "name", "email", "role", "phone"],
    StaffWhereUniqueInput: ["id", "email"],
    StaffOrderByWithAggregationInput: ["id", "name", "email", "role", "phone", "_count", "_max", "_min"],
    StaffScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "email", "role", "phone"],
    UserCreateInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserUpdateInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateManyInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    UserUpdateManyMutationInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "token", "createdAt", "updateAt"],
    MyCourseCreateInput: ["id", "courses", "student", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatches"],
    MyCourseUpdateInput: ["courses", "student", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatches"],
    MyCourseCreateManyInput: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    MyCourseUpdateManyMutationInput: ["createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus"],
    MyCartCreateInput: ["id", "createdAt", "updateAt", "courses", "user"],
    MyCartUpdateInput: ["createdAt", "updateAt", "courses", "user"],
    MyCartCreateManyInput: ["id", "createdAt", "updateAt", "coursesId", "userId"],
    MyCartUpdateManyMutationInput: ["createdAt", "updateAt"],
    CategoryCreateInput: ["id", "categoryName", "allCourses", "imageUrl", "createdAt", "updateAt"],
    CategoryUpdateInput: ["categoryName", "allCourses", "imageUrl", "createdAt", "updateAt"],
    CategoryCreateManyInput: ["id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    CategoryUpdateManyMutationInput: ["categoryName", "imageUrl", "createdAt", "updateAt"],
    CoursesCreateInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesUpdateInput: ["courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesCreateManyInput: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice"],
    CoursesUpdateManyMutationInput: ["courseName", "courseDesc", "courseIntro", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice"],
    LecturesCreateInput: ["id", "lectureTitle", "lectureVideo", "courses", "createdAt", "updateAt"],
    LecturesUpdateInput: ["lectureTitle", "lectureVideo", "courses", "createdAt", "updateAt"],
    LecturesCreateManyInput: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    LecturesUpdateManyMutationInput: ["lectureTitle", "lectureVideo", "createdAt", "updateAt"],
    CourseBatchesCreateInput: ["id", "name", "assignment", "quiz", "courses", "createdAt", "updateAt", "enrolledStudent"],
    CourseBatchesUpdateInput: ["name", "assignment", "quiz", "courses", "createdAt", "updateAt", "enrolledStudent"],
    CourseBatchesCreateManyInput: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseBatchesUpdateManyMutationInput: ["name", "createdAt", "updateAt"],
    CourseAssignmentCreateInput: ["id", "name", "CourseBatches", "courses", "createdAt", "updateAt"],
    CourseAssignmentUpdateInput: ["name", "CourseBatches", "courses", "createdAt", "updateAt"],
    CourseAssignmentCreateManyInput: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseAssignmentUpdateManyMutationInput: ["name", "createdAt", "updateAt"],
    CourseQuizCreateInput: ["id", "courseBatches", "courses", "createdAt", "updateAt"],
    CourseQuizUpdateInput: ["courseBatches", "courses", "createdAt", "updateAt"],
    CourseQuizCreateManyInput: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuizUpdateManyMutationInput: ["createdAt", "updateAt"],
    SpeakerCreateInput: ["id", "speakerName", "spkearDesc", "spekaerImage", "events", "createdAt", "updateAt"],
    SpeakerUpdateInput: ["speakerName", "spkearDesc", "spekaerImage", "events", "createdAt", "updateAt"],
    SpeakerCreateManyInput: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    SpeakerUpdateManyMutationInput: ["speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    EventsCreateInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "Speaker"],
    EventsUpdateInput: ["eventName", "eventDesc", "eventImage", "eventDate", "Speaker"],
    EventsCreateManyInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    EventsUpdateManyMutationInput: ["eventName", "eventDesc", "eventImage", "eventDate"],
    FaqCreateInput: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    FaqUpdateInput: ["faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    FaqCreateManyInput: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    FaqUpdateManyMutationInput: ["faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    SuccessStoriesCreateInput: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject", "user"],
    SuccessStoriesUpdateInput: ["freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject", "user"],
    SuccessStoriesCreateManyInput: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    SuccessStoriesUpdateManyMutationInput: ["freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    BlogsCreateInput: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType", "comments"],
    BlogsUpdateInput: ["blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType", "comments"],
    BlogsCreateManyInput: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    BlogsUpdateManyMutationInput: ["blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    CommentsCreateInput: ["id", "blogs", "createdAt", "comment", "User"],
    CommentsUpdateInput: ["blogs", "createdAt", "comment", "User"],
    CommentsCreateManyInput: ["id", "blogsId", "createdAt", "comment", "userId"],
    CommentsUpdateManyMutationInput: ["createdAt", "comment"],
    ContactUsCreateInput: ["id", "name", "subject", "message", "status", "reply"],
    ContactUsUpdateInput: ["name", "subject", "message", "status", "reply"],
    ContactUsCreateManyInput: ["id", "name", "subject", "message", "status", "reply"],
    ContactUsUpdateManyMutationInput: ["name", "subject", "message", "status", "reply"],
    AttendenceCreateInput: ["id", "attendence", "date", "user"],
    AttendenceUpdateInput: ["attendence", "date", "user"],
    AttendenceCreateManyInput: ["id", "attendence", "date", "userId"],
    AttendenceUpdateManyMutationInput: ["attendence", "date"],
    FeesCreateInput: ["id", "amountPaid", "remainingAmount", "student", "createdAt", "updateAt"],
    FeesUpdateInput: ["amountPaid", "remainingAmount", "student", "createdAt", "updateAt"],
    FeesCreateManyInput: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    FeesUpdateManyMutationInput: ["amountPaid", "remainingAmount", "createdAt", "updateAt"],
    EnrollmentApprovalCreateInput: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnrollmentApprovalUpdateInput: ["studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnrollmentApprovalCreateManyInput: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnrollmentApprovalUpdateManyMutationInput: ["studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    StudentsCreateInput: ["id", "name", "email", "status"],
    StudentsUpdateInput: ["name", "email", "status"],
    StudentsCreateManyInput: ["id", "name", "email", "status"],
    StudentsUpdateManyMutationInput: ["name", "email", "status"],
    StaffCreateInput: ["id", "name", "email", "role", "phone"],
    StaffUpdateInput: ["name", "email", "role", "phone"],
    StaffCreateManyInput: ["id", "name", "email", "role", "phone"],
    StaffUpdateManyMutationInput: ["name", "email", "role", "phone"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    EnumRoleFilter: ["equals", "in", "notIn", "not"],
    EnumPermissionFilter: ["equals", "in", "notIn", "not"],
    CoursesListRelationFilter: ["every", "some", "none"],
    MyCartListRelationFilter: ["every", "some", "none"],
    SuccessStoriesRelationFilter: ["is", "isNot"],
    BoolFilter: ["equals", "not"],
    CommentsListRelationFilter: ["every", "some", "none"],
    AttendenceListRelationFilter: ["every", "some", "none"],
    FeesListRelationFilter: ["every", "some", "none"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    MyCourseListRelationFilter: ["every", "some", "none"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    CoursesOrderByRelationAggregateInput: ["_count"],
    MyCartOrderByRelationAggregateInput: ["_count"],
    CommentsOrderByRelationAggregateInput: ["_count"],
    AttendenceOrderByRelationAggregateInput: ["_count"],
    FeesOrderByRelationAggregateInput: ["_count"],
    MyCourseOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    UserMaxOrderByAggregateInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    UserMinOrderByAggregateInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    EnumRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumPermissionWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    CoursesRelationFilter: ["is", "isNot"],
    UserRelationFilter: ["is", "isNot"],
    EnumFeeStatusFilter: ["equals", "in", "notIn", "not"],
    CourseBatchesRelationFilter: ["is", "isNot"],
    MyCourseCoursesIdStudentIdCompoundUniqueInput: ["coursesId", "studentId"],
    MyCourseCountOrderByAggregateInput: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    MyCourseMaxOrderByAggregateInput: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    MyCourseMinOrderByAggregateInput: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    EnumFeeStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    MyCartCountOrderByAggregateInput: ["id", "createdAt", "updateAt", "coursesId", "userId"],
    MyCartMaxOrderByAggregateInput: ["id", "createdAt", "updateAt", "coursesId", "userId"],
    MyCartMinOrderByAggregateInput: ["id", "createdAt", "updateAt", "coursesId", "userId"],
    CategoryCountOrderByAggregateInput: ["id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    CategoryMaxOrderByAggregateInput: ["id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    CategoryMinOrderByAggregateInput: ["id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    CategoryRelationFilter: ["is", "isNot"],
    LecturesListRelationFilter: ["every", "some", "none"],
    CourseBatchesListRelationFilter: ["every", "some", "none"],
    EnumStatusFilter: ["equals", "in", "notIn", "not"],
    JsonNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    CourseAssignmentListRelationFilter: ["every", "some", "none"],
    CourseQuizListRelationFilter: ["every", "some", "none"],
    LecturesOrderByRelationAggregateInput: ["_count"],
    CourseBatchesOrderByRelationAggregateInput: ["_count"],
    CourseAssignmentOrderByRelationAggregateInput: ["_count"],
    CourseQuizOrderByRelationAggregateInput: ["_count"],
    CoursesCountOrderByAggregateInput: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice"],
    CoursesMaxOrderByAggregateInput: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "coursePrice"],
    CoursesMinOrderByAggregateInput: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "coursePrice"],
    EnumStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    LecturesCountOrderByAggregateInput: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    LecturesMaxOrderByAggregateInput: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    LecturesMinOrderByAggregateInput: ["id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    CourseBatchesCountOrderByAggregateInput: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseBatchesMaxOrderByAggregateInput: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseBatchesMinOrderByAggregateInput: ["id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseAssignmentCountOrderByAggregateInput: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseAssignmentMaxOrderByAggregateInput: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseAssignmentMinOrderByAggregateInput: ["id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuizCountOrderByAggregateInput: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuizMaxOrderByAggregateInput: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuizMinOrderByAggregateInput: ["id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    EventsListRelationFilter: ["every", "some", "none"],
    EventsOrderByRelationAggregateInput: ["_count"],
    SpeakerCountOrderByAggregateInput: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    SpeakerMaxOrderByAggregateInput: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    SpeakerMinOrderByAggregateInput: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    SpeakerRelationFilter: ["is", "isNot"],
    EventsCountOrderByAggregateInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    EventsMaxOrderByAggregateInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    EventsMinOrderByAggregateInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    FaqCountOrderByAggregateInput: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    FaqMaxOrderByAggregateInput: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    FaqMinOrderByAggregateInput: ["id", "faqQuestion", "faqAnswer", "createdAt", "updateAt"],
    UserListRelationFilter: ["every", "some", "none"],
    UserOrderByRelationAggregateInput: ["_count"],
    SuccessStoriesCountOrderByAggregateInput: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    SuccessStoriesMaxOrderByAggregateInput: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    SuccessStoriesMinOrderByAggregateInput: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    BlogsCountOrderByAggregateInput: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    BlogsMaxOrderByAggregateInput: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    BlogsMinOrderByAggregateInput: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    BlogsRelationFilter: ["is", "isNot"],
    CommentsCountOrderByAggregateInput: ["id", "blogsId", "createdAt", "comment", "userId"],
    CommentsMaxOrderByAggregateInput: ["id", "blogsId", "createdAt", "comment", "userId"],
    CommentsMinOrderByAggregateInput: ["id", "blogsId", "createdAt", "comment", "userId"],
    EnumContactUsStatusFilter: ["equals", "in", "notIn", "not"],
    ContactUsCountOrderByAggregateInput: ["id", "name", "subject", "message", "status", "reply"],
    ContactUsMaxOrderByAggregateInput: ["id", "name", "subject", "message", "status", "reply"],
    ContactUsMinOrderByAggregateInput: ["id", "name", "subject", "message", "status", "reply"],
    EnumContactUsStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    AttendenceUserIdDateCompoundUniqueInput: ["userId", "date"],
    AttendenceCountOrderByAggregateInput: ["id", "attendence", "date", "userId"],
    AttendenceMaxOrderByAggregateInput: ["id", "attendence", "date", "userId"],
    AttendenceMinOrderByAggregateInput: ["id", "attendence", "date", "userId"],
    FeesCountOrderByAggregateInput: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    FeesMaxOrderByAggregateInput: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    FeesMinOrderByAggregateInput: ["id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    EnumEnrollStatusFilter: ["equals", "in", "notIn", "not"],
    EnrollmentApprovalCountOrderByAggregateInput: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnrollmentApprovalMaxOrderByAggregateInput: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnrollmentApprovalMinOrderByAggregateInput: ["id", "studentName", "email", "course", "paymentMethod", "amount", "transactionId", "status"],
    EnumEnrollStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumStudentStatusFilter: ["equals", "in", "notIn", "not"],
    StudentsCountOrderByAggregateInput: ["id", "name", "email", "status"],
    StudentsMaxOrderByAggregateInput: ["id", "name", "email", "status"],
    StudentsMinOrderByAggregateInput: ["id", "name", "email", "status"],
    EnumStudentStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumStaffRoleFilter: ["equals", "in", "notIn", "not"],
    StaffCountOrderByAggregateInput: ["id", "name", "email", "role", "phone"],
    StaffMaxOrderByAggregateInput: ["id", "name", "email", "role", "phone"],
    StaffMinOrderByAggregateInput: ["id", "name", "email", "role", "phone"],
    EnumStaffRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    CoursesCreateNestedManyWithoutInstructorInput: ["create", "connectOrCreate", "createMany", "connect"],
    MyCartCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    SuccessStoriesCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    CommentsCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    AttendenceCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    FeesCreateNestedManyWithoutStudentInput: ["create", "connectOrCreate", "createMany", "connect"],
    MyCourseCreateNestedManyWithoutStudentInput: ["create", "connectOrCreate", "createMany", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    EnumRoleFieldUpdateOperationsInput: ["set"],
    EnumPermissionFieldUpdateOperationsInput: ["set"],
    CoursesUpdateManyWithoutInstructorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MyCartUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SuccessStoriesUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    BoolFieldUpdateOperationsInput: ["set"],
    CommentsUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    AttendenceUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    FeesUpdateManyWithoutStudentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MyCourseUpdateManyWithoutStudentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    CoursesCreateNestedOneWithoutEnrollListInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutMyCourseInput: ["create", "connectOrCreate", "connect"],
    CourseBatchesCreateNestedOneWithoutEnrolledStudentInput: ["create", "connectOrCreate", "connect"],
    CoursesUpdateOneRequiredWithoutEnrollListInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutMyCourseInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumFeeStatusFieldUpdateOperationsInput: ["set"],
    CourseBatchesUpdateOneRequiredWithoutEnrolledStudentInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CoursesCreateNestedOneWithoutCartListInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutMyCartInput: ["create", "connectOrCreate", "connect"],
    CoursesUpdateOneRequiredWithoutCartListInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneWithoutMyCartInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CoursesCreateNestedManyWithoutCourseCategoryInput: ["create", "connectOrCreate", "createMany", "connect"],
    CoursesUpdateManyWithoutCourseCategoryInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutCoursesInput: ["create", "connectOrCreate", "connect"],
    CategoryCreateNestedOneWithoutAllCoursesInput: ["create", "connectOrCreate", "connect"],
    LecturesCreateNestedManyWithoutCoursesInput: ["create", "connectOrCreate", "createMany", "connect"],
    CourseBatchesCreateNestedManyWithoutCoursesInput: ["create", "connectOrCreate", "createMany", "connect"],
    CoursesCreatewhatYouLearnInput: ["set"],
    CourseAssignmentCreateNestedManyWithoutCoursesInput: ["create", "connectOrCreate", "createMany", "connect"],
    CourseQuizCreateNestedManyWithoutCoursesInput: ["create", "connectOrCreate", "createMany", "connect"],
    MyCourseCreateNestedManyWithoutCoursesInput: ["create", "connectOrCreate", "createMany", "connect"],
    MyCartCreateNestedManyWithoutCoursesInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserUpdateOneRequiredWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CategoryUpdateOneRequiredWithoutAllCoursesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    LecturesUpdateManyWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CourseBatchesUpdateManyWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    EnumStatusFieldUpdateOperationsInput: ["set"],
    CoursesUpdatewhatYouLearnInput: ["set", "push"],
    CourseAssignmentUpdateManyWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CourseQuizUpdateManyWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MyCourseUpdateManyWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MyCartUpdateManyWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CoursesCreateNestedOneWithoutLecturesInput: ["create", "connectOrCreate", "connect"],
    CoursesUpdateOneRequiredWithoutLecturesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CourseAssignmentCreateNestedManyWithoutCourseBatchesInput: ["create", "connectOrCreate", "createMany", "connect"],
    CourseQuizCreateNestedManyWithoutCourseBatchesInput: ["create", "connectOrCreate", "createMany", "connect"],
    CoursesCreateNestedOneWithoutTotalBatchesInput: ["create", "connectOrCreate", "connect"],
    MyCourseCreateNestedManyWithoutCourseBatchesInput: ["create", "connectOrCreate", "createMany", "connect"],
    CourseAssignmentUpdateManyWithoutCourseBatchesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CourseQuizUpdateManyWithoutCourseBatchesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CoursesUpdateOneRequiredWithoutTotalBatchesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MyCourseUpdateManyWithoutCourseBatchesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CourseBatchesCreateNestedOneWithoutAssignmentInput: ["create", "connectOrCreate", "connect"],
    CoursesCreateNestedOneWithoutAssignmentInput: ["create", "connectOrCreate", "connect"],
    CourseBatchesUpdateOneRequiredWithoutAssignmentInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CoursesUpdateOneRequiredWithoutAssignmentInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CourseBatchesCreateNestedOneWithoutQuizInput: ["create", "connectOrCreate", "connect"],
    CoursesCreateNestedOneWithoutCourseQuizInput: ["create", "connectOrCreate", "connect"],
    CourseBatchesUpdateOneRequiredWithoutQuizInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CoursesUpdateOneRequiredWithoutCourseQuizInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EventsCreateNestedManyWithoutSpeakerInput: ["create", "connectOrCreate", "createMany", "connect"],
    EventsUpdateManyWithoutSpeakerInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SpeakerCreateNestedOneWithoutEventsInput: ["create", "connectOrCreate", "connect"],
    SpeakerUpdateOneRequiredWithoutEventsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedManyWithoutSuccessStoryInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserUpdateManyWithoutSuccessStoryInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentsCreateNestedManyWithoutBlogsInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentsUpdateManyWithoutBlogsInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    BlogsCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutMyCommentsInput: ["create", "connectOrCreate", "connect"],
    BlogsUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneWithoutMyCommentsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    EnumContactUsStatusFieldUpdateOperationsInput: ["set"],
    UserCreateNestedOneWithoutAttendenceInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutAttendenceInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutFeesInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutFeesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumEnrollStatusFieldUpdateOperationsInput: ["set"],
    EnumStudentStatusFieldUpdateOperationsInput: ["set"],
    EnumStaffRoleFieldUpdateOperationsInput: ["set"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedEnumRoleFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPermissionFilter: ["equals", "in", "notIn", "not"],
    NestedBoolFilter: ["equals", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedEnumRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumPermissionWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedEnumFeeStatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumFeeStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumStatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumContactUsStatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumContactUsStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumEnrollStatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumEnrollStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumStudentStatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumStudentStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumStaffRoleFilter: ["equals", "in", "notIn", "not"],
    NestedEnumStaffRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    CoursesCreateWithoutInstructorInput: ["id", "courseName", "courseDesc", "courseIntro", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesCreateOrConnectWithoutInstructorInput: ["where", "create"],
    CoursesCreateManyInstructorInputEnvelope: ["data"],
    MyCartCreateWithoutUserInput: ["id", "createdAt", "updateAt", "courses"],
    MyCartCreateOrConnectWithoutUserInput: ["where", "create"],
    MyCartCreateManyUserInputEnvelope: ["data"],
    SuccessStoriesCreateWithoutUserInput: ["id", "freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    SuccessStoriesCreateOrConnectWithoutUserInput: ["where", "create"],
    CommentsCreateWithoutUserInput: ["id", "blogs", "createdAt", "comment"],
    CommentsCreateOrConnectWithoutUserInput: ["where", "create"],
    CommentsCreateManyUserInputEnvelope: ["data"],
    AttendenceCreateWithoutUserInput: ["id", "attendence", "date"],
    AttendenceCreateOrConnectWithoutUserInput: ["where", "create"],
    AttendenceCreateManyUserInputEnvelope: ["data"],
    FeesCreateWithoutStudentInput: ["id", "amountPaid", "remainingAmount", "createdAt", "updateAt"],
    FeesCreateOrConnectWithoutStudentInput: ["where", "create"],
    FeesCreateManyStudentInputEnvelope: ["data"],
    MyCourseCreateWithoutStudentInput: ["id", "courses", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatches"],
    MyCourseCreateOrConnectWithoutStudentInput: ["where", "create"],
    MyCourseCreateManyStudentInputEnvelope: ["data"],
    CoursesUpsertWithWhereUniqueWithoutInstructorInput: ["where", "update", "create"],
    CoursesUpdateWithWhereUniqueWithoutInstructorInput: ["where", "data"],
    CoursesUpdateManyWithWhereWithoutInstructorInput: ["where", "data"],
    CoursesScalarWhereInput: ["AND", "OR", "NOT", "id", "courseName", "courseDesc", "courseIntro", "instructorId", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice"],
    MyCartUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    MyCartUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    MyCartUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    MyCartScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updateAt", "coursesId", "userId"],
    SuccessStoriesUpsertWithoutUserInput: ["update", "create"],
    SuccessStoriesUpdateWithoutUserInput: ["freelancingProfileUrl", "paymentProof", "description", "status", "totalEarnedAmount", "city", "whyReject"],
    CommentsUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    CommentsUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    CommentsUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    CommentsScalarWhereInput: ["AND", "OR", "NOT", "id", "blogsId", "createdAt", "comment", "userId"],
    AttendenceUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    AttendenceUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    AttendenceUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    AttendenceScalarWhereInput: ["AND", "OR", "NOT", "id", "attendence", "date", "userId"],
    FeesUpsertWithWhereUniqueWithoutStudentInput: ["where", "update", "create"],
    FeesUpdateWithWhereUniqueWithoutStudentInput: ["where", "data"],
    FeesUpdateManyWithWhereWithoutStudentInput: ["where", "data"],
    FeesScalarWhereInput: ["AND", "OR", "NOT", "id", "amountPaid", "remainingAmount", "studentId", "studentName", "createdAt", "updateAt"],
    MyCourseUpsertWithWhereUniqueWithoutStudentInput: ["where", "update", "create"],
    MyCourseUpdateWithWhereUniqueWithoutStudentInput: ["where", "data"],
    MyCourseUpdateManyWithWhereWithoutStudentInput: ["where", "data"],
    MyCourseScalarWhereInput: ["AND", "OR", "NOT", "id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    CoursesCreateWithoutEnrollListInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "cartList", "coursePrice"],
    CoursesCreateOrConnectWithoutEnrollListInput: ["where", "create"],
    UserCreateWithoutMyCourseInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "attendence", "fees", "token", "createdAt", "updateAt"],
    UserCreateOrConnectWithoutMyCourseInput: ["where", "create"],
    CourseBatchesCreateWithoutEnrolledStudentInput: ["id", "name", "assignment", "quiz", "courses", "createdAt", "updateAt"],
    CourseBatchesCreateOrConnectWithoutEnrolledStudentInput: ["where", "create"],
    CoursesUpsertWithoutEnrollListInput: ["update", "create"],
    CoursesUpdateWithoutEnrollListInput: ["courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "cartList", "coursePrice"],
    UserUpsertWithoutMyCourseInput: ["update", "create"],
    UserUpdateWithoutMyCourseInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "attendence", "fees", "token", "createdAt", "updateAt"],
    CourseBatchesUpsertWithoutEnrolledStudentInput: ["update", "create"],
    CourseBatchesUpdateWithoutEnrolledStudentInput: ["name", "assignment", "quiz", "courses", "createdAt", "updateAt"],
    CoursesCreateWithoutCartListInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "coursePrice"],
    CoursesCreateOrConnectWithoutCartListInput: ["where", "create"],
    UserCreateWithoutMyCartInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "successStory", "emailApproval", "myComments", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateOrConnectWithoutMyCartInput: ["where", "create"],
    CoursesUpsertWithoutCartListInput: ["update", "create"],
    CoursesUpdateWithoutCartListInput: ["courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "coursePrice"],
    UserUpsertWithoutMyCartInput: ["update", "create"],
    UserUpdateWithoutMyCartInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "successStory", "emailApproval", "myComments", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    CoursesCreateWithoutCourseCategoryInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesCreateOrConnectWithoutCourseCategoryInput: ["where", "create"],
    CoursesCreateManyCourseCategoryInputEnvelope: ["data"],
    CoursesUpsertWithWhereUniqueWithoutCourseCategoryInput: ["where", "update", "create"],
    CoursesUpdateWithWhereUniqueWithoutCourseCategoryInput: ["where", "data"],
    CoursesUpdateManyWithWhereWithoutCourseCategoryInput: ["where", "data"],
    UserCreateWithoutCoursesInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "myCart", "successStory", "emailApproval", "myComments", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateOrConnectWithoutCoursesInput: ["where", "create"],
    CategoryCreateWithoutAllCoursesInput: ["id", "categoryName", "imageUrl", "createdAt", "updateAt"],
    CategoryCreateOrConnectWithoutAllCoursesInput: ["where", "create"],
    LecturesCreateWithoutCoursesInput: ["id", "lectureTitle", "lectureVideo", "createdAt", "updateAt"],
    LecturesCreateOrConnectWithoutCoursesInput: ["where", "create"],
    LecturesCreateManyCoursesInputEnvelope: ["data"],
    CourseBatchesCreateWithoutCoursesInput: ["id", "name", "assignment", "quiz", "createdAt", "updateAt", "enrolledStudent"],
    CourseBatchesCreateOrConnectWithoutCoursesInput: ["where", "create"],
    CourseBatchesCreateManyCoursesInputEnvelope: ["data"],
    CourseAssignmentCreateWithoutCoursesInput: ["id", "name", "CourseBatches", "createdAt", "updateAt"],
    CourseAssignmentCreateOrConnectWithoutCoursesInput: ["where", "create"],
    CourseAssignmentCreateManyCoursesInputEnvelope: ["data"],
    CourseQuizCreateWithoutCoursesInput: ["id", "courseBatches", "createdAt", "updateAt"],
    CourseQuizCreateOrConnectWithoutCoursesInput: ["where", "create"],
    CourseQuizCreateManyCoursesInputEnvelope: ["data"],
    MyCourseCreateWithoutCoursesInput: ["id", "student", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatches"],
    MyCourseCreateOrConnectWithoutCoursesInput: ["where", "create"],
    MyCourseCreateManyCoursesInputEnvelope: ["data"],
    MyCartCreateWithoutCoursesInput: ["id", "createdAt", "updateAt", "user"],
    MyCartCreateOrConnectWithoutCoursesInput: ["where", "create"],
    MyCartCreateManyCoursesInputEnvelope: ["data"],
    UserUpsertWithoutCoursesInput: ["update", "create"],
    UserUpdateWithoutCoursesInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "myCart", "successStory", "emailApproval", "myComments", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    CategoryUpsertWithoutAllCoursesInput: ["update", "create"],
    CategoryUpdateWithoutAllCoursesInput: ["categoryName", "imageUrl", "createdAt", "updateAt"],
    LecturesUpsertWithWhereUniqueWithoutCoursesInput: ["where", "update", "create"],
    LecturesUpdateWithWhereUniqueWithoutCoursesInput: ["where", "data"],
    LecturesUpdateManyWithWhereWithoutCoursesInput: ["where", "data"],
    LecturesScalarWhereInput: ["AND", "OR", "NOT", "id", "lectureTitle", "lectureVideo", "coursesId", "createdAt", "updateAt"],
    CourseBatchesUpsertWithWhereUniqueWithoutCoursesInput: ["where", "update", "create"],
    CourseBatchesUpdateWithWhereUniqueWithoutCoursesInput: ["where", "data"],
    CourseBatchesUpdateManyWithWhereWithoutCoursesInput: ["where", "data"],
    CourseBatchesScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "coursesId", "courseName", "createdAt", "updateAt"],
    CourseAssignmentUpsertWithWhereUniqueWithoutCoursesInput: ["where", "update", "create"],
    CourseAssignmentUpdateWithWhereUniqueWithoutCoursesInput: ["where", "data"],
    CourseAssignmentUpdateManyWithWhereWithoutCoursesInput: ["where", "data"],
    CourseAssignmentScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    CourseQuizUpsertWithWhereUniqueWithoutCoursesInput: ["where", "update", "create"],
    CourseQuizUpdateWithWhereUniqueWithoutCoursesInput: ["where", "data"],
    CourseQuizUpdateManyWithWhereWithoutCoursesInput: ["where", "data"],
    CourseQuizScalarWhereInput: ["AND", "OR", "NOT", "id", "courseBatchesId", "coursesId", "createdAt", "updateAt"],
    MyCourseUpsertWithWhereUniqueWithoutCoursesInput: ["where", "update", "create"],
    MyCourseUpdateWithWhereUniqueWithoutCoursesInput: ["where", "data"],
    MyCourseUpdateManyWithWhereWithoutCoursesInput: ["where", "data"],
    MyCartUpsertWithWhereUniqueWithoutCoursesInput: ["where", "update", "create"],
    MyCartUpdateWithWhereUniqueWithoutCoursesInput: ["where", "data"],
    MyCartUpdateManyWithWhereWithoutCoursesInput: ["where", "data"],
    CoursesCreateWithoutLecturesInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesCreateOrConnectWithoutLecturesInput: ["where", "create"],
    CoursesUpsertWithoutLecturesInput: ["update", "create"],
    CoursesUpdateWithoutLecturesInput: ["courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CourseAssignmentCreateWithoutCourseBatchesInput: ["id", "name", "courses", "createdAt", "updateAt"],
    CourseAssignmentCreateOrConnectWithoutCourseBatchesInput: ["where", "create"],
    CourseAssignmentCreateManyCourseBatchesInputEnvelope: ["data"],
    CourseQuizCreateWithoutCourseBatchesInput: ["id", "courses", "createdAt", "updateAt"],
    CourseQuizCreateOrConnectWithoutCourseBatchesInput: ["where", "create"],
    CourseQuizCreateManyCourseBatchesInputEnvelope: ["data"],
    CoursesCreateWithoutTotalBatchesInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesCreateOrConnectWithoutTotalBatchesInput: ["where", "create"],
    MyCourseCreateWithoutCourseBatchesInput: ["id", "courses", "student", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus"],
    MyCourseCreateOrConnectWithoutCourseBatchesInput: ["where", "create"],
    MyCourseCreateManyCourseBatchesInputEnvelope: ["data"],
    CourseAssignmentUpsertWithWhereUniqueWithoutCourseBatchesInput: ["where", "update", "create"],
    CourseAssignmentUpdateWithWhereUniqueWithoutCourseBatchesInput: ["where", "data"],
    CourseAssignmentUpdateManyWithWhereWithoutCourseBatchesInput: ["where", "data"],
    CourseQuizUpsertWithWhereUniqueWithoutCourseBatchesInput: ["where", "update", "create"],
    CourseQuizUpdateWithWhereUniqueWithoutCourseBatchesInput: ["where", "data"],
    CourseQuizUpdateManyWithWhereWithoutCourseBatchesInput: ["where", "data"],
    CoursesUpsertWithoutTotalBatchesInput: ["update", "create"],
    CoursesUpdateWithoutTotalBatchesInput: ["courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    MyCourseUpsertWithWhereUniqueWithoutCourseBatchesInput: ["where", "update", "create"],
    MyCourseUpdateWithWhereUniqueWithoutCourseBatchesInput: ["where", "data"],
    MyCourseUpdateManyWithWhereWithoutCourseBatchesInput: ["where", "data"],
    CourseBatchesCreateWithoutAssignmentInput: ["id", "name", "quiz", "courses", "createdAt", "updateAt", "enrolledStudent"],
    CourseBatchesCreateOrConnectWithoutAssignmentInput: ["where", "create"],
    CoursesCreateWithoutAssignmentInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CoursesCreateOrConnectWithoutAssignmentInput: ["where", "create"],
    CourseBatchesUpsertWithoutAssignmentInput: ["update", "create"],
    CourseBatchesUpdateWithoutAssignmentInput: ["name", "quiz", "courses", "createdAt", "updateAt", "enrolledStudent"],
    CoursesUpsertWithoutAssignmentInput: ["update", "create"],
    CoursesUpdateWithoutAssignmentInput: ["courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    CourseBatchesCreateWithoutQuizInput: ["id", "name", "assignment", "courses", "createdAt", "updateAt", "enrolledStudent"],
    CourseBatchesCreateOrConnectWithoutQuizInput: ["where", "create"],
    CoursesCreateWithoutCourseQuizInput: ["id", "courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "enrollList", "cartList", "coursePrice"],
    CoursesCreateOrConnectWithoutCourseQuizInput: ["where", "create"],
    CourseBatchesUpsertWithoutQuizInput: ["update", "create"],
    CourseBatchesUpdateWithoutQuizInput: ["name", "assignment", "courses", "createdAt", "updateAt", "enrolledStudent"],
    CoursesUpsertWithoutCourseQuizInput: ["update", "create"],
    CoursesUpdateWithoutCourseQuizInput: ["courseName", "courseDesc", "courseIntro", "instructor", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "enrollList", "cartList", "coursePrice"],
    EventsCreateWithoutSpeakerInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate"],
    EventsCreateOrConnectWithoutSpeakerInput: ["where", "create"],
    EventsCreateManySpeakerInputEnvelope: ["data"],
    EventsUpsertWithWhereUniqueWithoutSpeakerInput: ["where", "update", "create"],
    EventsUpdateWithWhereUniqueWithoutSpeakerInput: ["where", "data"],
    EventsUpdateManyWithWhereWithoutSpeakerInput: ["where", "data"],
    EventsScalarWhereInput: ["AND", "OR", "NOT", "id", "eventName", "eventDesc", "eventImage", "eventDate", "speakerId"],
    SpeakerCreateWithoutEventsInput: ["id", "speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    SpeakerCreateOrConnectWithoutEventsInput: ["where", "create"],
    SpeakerUpsertWithoutEventsInput: ["update", "create"],
    SpeakerUpdateWithoutEventsInput: ["speakerName", "spkearDesc", "spekaerImage", "createdAt", "updateAt"],
    UserCreateWithoutSuccessStoryInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "emailApproval", "myComments", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateOrConnectWithoutSuccessStoryInput: ["where", "create"],
    UserCreateManySuccessStoryInputEnvelope: ["data"],
    UserUpsertWithWhereUniqueWithoutSuccessStoryInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutSuccessStoryInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutSuccessStoryInput: ["where", "data"],
    UserScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "successStoriesId", "token", "createdAt", "updateAt"],
    CommentsCreateWithoutBlogsInput: ["id", "createdAt", "comment", "User"],
    CommentsCreateOrConnectWithoutBlogsInput: ["where", "create"],
    CommentsCreateManyBlogsInputEnvelope: ["data"],
    CommentsUpsertWithWhereUniqueWithoutBlogsInput: ["where", "update", "create"],
    CommentsUpdateWithWhereUniqueWithoutBlogsInput: ["where", "data"],
    CommentsUpdateManyWithWhereWithoutBlogsInput: ["where", "data"],
    BlogsCreateWithoutCommentsInput: ["id", "blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    BlogsCreateOrConnectWithoutCommentsInput: ["where", "create"],
    UserCreateWithoutMyCommentsInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateOrConnectWithoutMyCommentsInput: ["where", "create"],
    BlogsUpsertWithoutCommentsInput: ["update", "create"],
    BlogsUpdateWithoutCommentsInput: ["blogTitle", "blogDescription", "createdAt", "updateAt", "featuredImage", "commentType"],
    UserUpsertWithoutMyCommentsInput: ["update", "create"],
    UserUpdateWithoutMyCommentsInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateWithoutAttendenceInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateOrConnectWithoutAttendenceInput: ["where", "create"],
    UserUpsertWithoutAttendenceInput: ["update", "create"],
    UserUpdateWithoutAttendenceInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "fees", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateWithoutFeesInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "attendence", "myCourse", "token", "createdAt", "updateAt"],
    UserCreateOrConnectWithoutFeesInput: ["where", "create"],
    UserUpsertWithoutFeesInput: ["update", "create"],
    UserUpdateWithoutFeesInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "successStory", "emailApproval", "myComments", "attendence", "myCourse", "token", "createdAt", "updateAt"],
    CoursesCreateManyInstructorInput: ["id", "courseName", "courseDesc", "courseIntro", "courseCategoryId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice"],
    MyCartCreateManyUserInput: ["id", "createdAt", "updateAt", "coursesId"],
    CommentsCreateManyUserInput: ["id", "blogsId", "createdAt", "comment"],
    AttendenceCreateManyUserInput: ["id", "attendence", "date"],
    FeesCreateManyStudentInput: ["id", "amountPaid", "remainingAmount", "createdAt", "updateAt"],
    MyCourseCreateManyStudentInput: ["id", "coursesId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    CoursesUpdateWithoutInstructorInput: ["courseName", "courseDesc", "courseIntro", "courseCategory", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    MyCartUpdateWithoutUserInput: ["createdAt", "updateAt", "courses"],
    CommentsUpdateWithoutUserInput: ["blogs", "createdAt", "comment"],
    AttendenceUpdateWithoutUserInput: ["attendence", "date"],
    FeesUpdateWithoutStudentInput: ["amountPaid", "remainingAmount", "createdAt", "updateAt"],
    MyCourseUpdateWithoutStudentInput: ["courses", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatches"],
    CoursesCreateManyCourseCategoryInput: ["id", "courseName", "courseDesc", "courseIntro", "instructorId", "createdAt", "updateAt", "courseStatus", "whatYouLearn", "coursePrice"],
    CoursesUpdateWithoutCourseCategoryInput: ["courseName", "courseDesc", "courseIntro", "instructor", "createdAt", "updateAt", "lectures", "totalBatches", "courseStatus", "whatYouLearn", "assignment", "courseQuiz", "enrollList", "cartList", "coursePrice"],
    LecturesCreateManyCoursesInput: ["id", "lectureTitle", "lectureVideo", "createdAt", "updateAt"],
    CourseBatchesCreateManyCoursesInput: ["id", "name", "createdAt", "updateAt"],
    CourseAssignmentCreateManyCoursesInput: ["id", "name", "courseBatchesId", "createdAt", "updateAt"],
    CourseQuizCreateManyCoursesInput: ["id", "courseBatchesId", "createdAt", "updateAt"],
    MyCourseCreateManyCoursesInput: ["id", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatchesId"],
    MyCartCreateManyCoursesInput: ["id", "createdAt", "updateAt", "userId"],
    LecturesUpdateWithoutCoursesInput: ["lectureTitle", "lectureVideo", "createdAt", "updateAt"],
    CourseBatchesUpdateWithoutCoursesInput: ["name", "assignment", "quiz", "createdAt", "updateAt", "enrolledStudent"],
    CourseAssignmentUpdateWithoutCoursesInput: ["name", "CourseBatches", "createdAt", "updateAt"],
    CourseQuizUpdateWithoutCoursesInput: ["courseBatches", "createdAt", "updateAt"],
    MyCourseUpdateWithoutCoursesInput: ["student", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus", "courseBatches"],
    MyCartUpdateWithoutCoursesInput: ["createdAt", "updateAt", "user"],
    CourseAssignmentCreateManyCourseBatchesInput: ["id", "name", "coursesId", "createdAt", "updateAt"],
    CourseQuizCreateManyCourseBatchesInput: ["id", "coursesId", "createdAt", "updateAt"],
    MyCourseCreateManyCourseBatchesInput: ["id", "coursesId", "studentId", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus"],
    CourseAssignmentUpdateWithoutCourseBatchesInput: ["name", "courses", "createdAt", "updateAt"],
    CourseQuizUpdateWithoutCourseBatchesInput: ["courses", "createdAt", "updateAt"],
    MyCourseUpdateWithoutCourseBatchesInput: ["courses", "student", "createdAt", "updateAt", "courseApproval", "whyReject", "feeStatus"],
    EventsCreateManySpeakerInput: ["id", "eventName", "eventDesc", "eventImage", "eventDate"],
    EventsUpdateWithoutSpeakerInput: ["eventName", "eventDesc", "eventImage", "eventDate"],
    UserCreateManySuccessStoryInput: ["id", "name", "email", "password", "cnic", "address", "phone", "role", "permission", "emailApproval", "token", "createdAt", "updateAt"],
    UserUpdateWithoutSuccessStoryInput: ["name", "email", "password", "cnic", "address", "phone", "role", "permission", "courses", "myCart", "emailApproval", "myComments", "attendence", "fees", "myCourse", "token", "createdAt", "updateAt"],
    CommentsCreateManyBlogsInput: ["id", "createdAt", "comment", "userId"],
    CommentsUpdateWithoutBlogsInput: ["createdAt", "comment", "User"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
