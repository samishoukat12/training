"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CourseBatchesRelationsResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const CourseAssignment_1 = require("../../../models/CourseAssignment");
const CourseBatches_1 = require("../../../models/CourseBatches");
const CourseQuiz_1 = require("../../../models/CourseQuiz");
const Courses_1 = require("../../../models/Courses");
const MyCourse_1 = require("../../../models/MyCourse");
const CourseBatchesAssignmentArgs_1 = require("./args/CourseBatchesAssignmentArgs");
const CourseBatchesEnrolledStudentArgs_1 = require("./args/CourseBatchesEnrolledStudentArgs");
const CourseBatchesQuizArgs_1 = require("./args/CourseBatchesQuizArgs");
const helpers_1 = require("../../../helpers");
let CourseBatchesRelationsResolver = class CourseBatchesRelationsResolver {
    async assignment(courseBatches, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.findUnique({
            where: {
                id: courseBatches.id,
            },
        }).assignment(args);
    }
    async quiz(courseBatches, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.findUnique({
            where: {
                id: courseBatches.id,
            },
        }).quiz(args);
    }
    async courses(courseBatches, ctx) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.findUnique({
            where: {
                id: courseBatches.id,
            },
        }).courses({});
    }
    async enrolledStudent(courseBatches, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.findUnique({
            where: {
                id: courseBatches.id,
            },
        }).enrolledStudent(args);
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [CourseAssignment_1.CourseAssignment], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [CourseBatches_1.CourseBatches, Object, CourseBatchesAssignmentArgs_1.CourseBatchesAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesRelationsResolver.prototype, "assignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [CourseQuiz_1.CourseQuiz], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [CourseBatches_1.CourseBatches, Object, CourseBatchesQuizArgs_1.CourseBatchesQuizArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesRelationsResolver.prototype, "quiz", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => Courses_1.Courses, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [CourseBatches_1.CourseBatches, Object]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesRelationsResolver.prototype, "courses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [MyCourse_1.MyCourse], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [CourseBatches_1.CourseBatches, Object, CourseBatchesEnrolledStudentArgs_1.CourseBatchesEnrolledStudentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesRelationsResolver.prototype, "enrolledStudent", null);
CourseBatchesRelationsResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => CourseBatches_1.CourseBatches)
], CourseBatchesRelationsResolver);
exports.CourseBatchesRelationsResolver = CourseBatchesRelationsResolver;
