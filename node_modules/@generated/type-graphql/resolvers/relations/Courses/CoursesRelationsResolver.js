"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoursesRelationsResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const Category_1 = require("../../../models/Category");
const CourseAssignment_1 = require("../../../models/CourseAssignment");
const CourseBatches_1 = require("../../../models/CourseBatches");
const CourseQuiz_1 = require("../../../models/CourseQuiz");
const Courses_1 = require("../../../models/Courses");
const Lectures_1 = require("../../../models/Lectures");
const MyCart_1 = require("../../../models/MyCart");
const MyCourse_1 = require("../../../models/MyCourse");
const User_1 = require("../../../models/User");
const CoursesAssignmentArgs_1 = require("./args/CoursesAssignmentArgs");
const CoursesCartListArgs_1 = require("./args/CoursesCartListArgs");
const CoursesCourseQuizArgs_1 = require("./args/CoursesCourseQuizArgs");
const CoursesEnrollListArgs_1 = require("./args/CoursesEnrollListArgs");
const CoursesLecturesArgs_1 = require("./args/CoursesLecturesArgs");
const CoursesTotalBatchesArgs_1 = require("./args/CoursesTotalBatchesArgs");
const helpers_1 = require("../../../helpers");
let CoursesRelationsResolver = class CoursesRelationsResolver {
    async instructor(courses, ctx) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            where: {
                id: courses.id,
            },
        }).instructor({});
    }
    async courseCategory(courses, ctx) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            where: {
                id: courses.id,
            },
        }).courseCategory({});
    }
    async lectures(courses, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            where: {
                id: courses.id,
            },
        }).lectures(args);
    }
    async totalBatches(courses, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            where: {
                id: courses.id,
            },
        }).totalBatches(args);
    }
    async assignment(courses, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            where: {
                id: courses.id,
            },
        }).assignment(args);
    }
    async courseQuiz(courses, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            where: {
                id: courses.id,
            },
        }).courseQuiz(args);
    }
    async enrollList(courses, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            where: {
                id: courses.id,
            },
        }).enrollList(args);
    }
    async cartList(courses, ctx, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            where: {
                id: courses.id,
            },
        }).cartList(args);
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => User_1.User, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Courses_1.Courses, Object]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesRelationsResolver.prototype, "instructor", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => Category_1.Category, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Courses_1.Courses, Object]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesRelationsResolver.prototype, "courseCategory", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [Lectures_1.Lectures], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Courses_1.Courses, Object, CoursesLecturesArgs_1.CoursesLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesRelationsResolver.prototype, "lectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [CourseBatches_1.CourseBatches], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Courses_1.Courses, Object, CoursesTotalBatchesArgs_1.CoursesTotalBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesRelationsResolver.prototype, "totalBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [CourseAssignment_1.CourseAssignment], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Courses_1.Courses, Object, CoursesAssignmentArgs_1.CoursesAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesRelationsResolver.prototype, "assignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [CourseQuiz_1.CourseQuiz], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Courses_1.Courses, Object, CoursesCourseQuizArgs_1.CoursesCourseQuizArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesRelationsResolver.prototype, "courseQuiz", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [MyCourse_1.MyCourse], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Courses_1.Courses, Object, CoursesEnrollListArgs_1.CoursesEnrollListArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesRelationsResolver.prototype, "enrollList", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.FieldResolver(_type => [MyCart_1.MyCart], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Root()),
    (0, tslib_1.__param)(1, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Courses_1.Courses, Object, CoursesCartListArgs_1.CoursesCartListArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesRelationsResolver.prototype, "cartList", null);
CoursesRelationsResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Courses_1.Courses)
], CoursesRelationsResolver);
exports.CoursesRelationsResolver = CoursesRelationsResolver;
