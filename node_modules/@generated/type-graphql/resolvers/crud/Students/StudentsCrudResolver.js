"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StudentsCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateStudentsArgs_1 = require("./args/AggregateStudentsArgs");
const CreateManyStudentsArgs_1 = require("./args/CreateManyStudentsArgs");
const CreateStudentsArgs_1 = require("./args/CreateStudentsArgs");
const DeleteManyStudentsArgs_1 = require("./args/DeleteManyStudentsArgs");
const DeleteStudentsArgs_1 = require("./args/DeleteStudentsArgs");
const FindFirstStudentsArgs_1 = require("./args/FindFirstStudentsArgs");
const FindManyStudentsArgs_1 = require("./args/FindManyStudentsArgs");
const FindUniqueStudentsArgs_1 = require("./args/FindUniqueStudentsArgs");
const GroupByStudentsArgs_1 = require("./args/GroupByStudentsArgs");
const UpdateManyStudentsArgs_1 = require("./args/UpdateManyStudentsArgs");
const UpdateStudentsArgs_1 = require("./args/UpdateStudentsArgs");
const UpsertStudentsArgs_1 = require("./args/UpsertStudentsArgs");
const helpers_1 = require("../../../helpers");
const Students_1 = require("../../../models/Students");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateStudents_1 = require("../../outputs/AggregateStudents");
const StudentsGroupBy_1 = require("../../outputs/StudentsGroupBy");
let StudentsCrudResolver = class StudentsCrudResolver {
    async findUniqueStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertStudents(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateStudents(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).students.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByStudents(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).students.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Students_1.Students, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueStudentsArgs_1.FindUniqueStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "findUniqueStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Students_1.Students, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstStudentsArgs_1.FindFirstStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "findFirstStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Students_1.Students], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyStudentsArgs_1.FindManyStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "findManyStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Students_1.Students, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateStudentsArgs_1.CreateStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "createStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyStudentsArgs_1.CreateManyStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "createManyStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Students_1.Students, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteStudentsArgs_1.DeleteStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "deleteStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Students_1.Students, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateStudentsArgs_1.UpdateStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "updateStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyStudentsArgs_1.DeleteManyStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "deleteManyStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyStudentsArgs_1.UpdateManyStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "updateManyStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Students_1.Students, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertStudentsArgs_1.UpsertStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "upsertStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateStudents_1.AggregateStudents, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateStudentsArgs_1.AggregateStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "aggregateStudents", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [StudentsGroupBy_1.StudentsGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByStudentsArgs_1.GroupByStudentsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StudentsCrudResolver.prototype, "groupByStudents", null);
StudentsCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Students_1.Students)
], StudentsCrudResolver);
exports.StudentsCrudResolver = StudentsCrudResolver;
