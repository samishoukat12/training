import { GraphQLResolveInfo } from "graphql";
import { AggregateStudentsArgs } from "./args/AggregateStudentsArgs";
import { CreateManyStudentsArgs } from "./args/CreateManyStudentsArgs";
import { CreateStudentsArgs } from "./args/CreateStudentsArgs";
import { DeleteManyStudentsArgs } from "./args/DeleteManyStudentsArgs";
import { DeleteStudentsArgs } from "./args/DeleteStudentsArgs";
import { FindFirstStudentsArgs } from "./args/FindFirstStudentsArgs";
import { FindManyStudentsArgs } from "./args/FindManyStudentsArgs";
import { FindUniqueStudentsArgs } from "./args/FindUniqueStudentsArgs";
import { GroupByStudentsArgs } from "./args/GroupByStudentsArgs";
import { UpdateManyStudentsArgs } from "./args/UpdateManyStudentsArgs";
import { UpdateStudentsArgs } from "./args/UpdateStudentsArgs";
import { UpsertStudentsArgs } from "./args/UpsertStudentsArgs";
import { Students } from "../../../models/Students";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateStudents } from "../../outputs/AggregateStudents";
import { StudentsGroupBy } from "../../outputs/StudentsGroupBy";
export declare class StudentsCrudResolver {
    findUniqueStudents(ctx: any, info: GraphQLResolveInfo, args: FindUniqueStudentsArgs): Promise<Students | null>;
    findFirstStudents(ctx: any, info: GraphQLResolveInfo, args: FindFirstStudentsArgs): Promise<Students | null>;
    findManyStudents(ctx: any, info: GraphQLResolveInfo, args: FindManyStudentsArgs): Promise<Students[]>;
    createStudents(ctx: any, info: GraphQLResolveInfo, args: CreateStudentsArgs): Promise<Students>;
    createManyStudents(ctx: any, info: GraphQLResolveInfo, args: CreateManyStudentsArgs): Promise<AffectedRowsOutput>;
    deleteStudents(ctx: any, info: GraphQLResolveInfo, args: DeleteStudentsArgs): Promise<Students | null>;
    updateStudents(ctx: any, info: GraphQLResolveInfo, args: UpdateStudentsArgs): Promise<Students | null>;
    deleteManyStudents(ctx: any, info: GraphQLResolveInfo, args: DeleteManyStudentsArgs): Promise<AffectedRowsOutput>;
    updateManyStudents(ctx: any, info: GraphQLResolveInfo, args: UpdateManyStudentsArgs): Promise<AffectedRowsOutput>;
    upsertStudents(ctx: any, info: GraphQLResolveInfo, args: UpsertStudentsArgs): Promise<Students>;
    aggregateStudents(ctx: any, info: GraphQLResolveInfo, args: AggregateStudentsArgs): Promise<AggregateStudents>;
    groupByStudents(ctx: any, info: GraphQLResolveInfo, args: GroupByStudentsArgs): Promise<StudentsGroupBy[]>;
}
