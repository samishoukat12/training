import { GraphQLResolveInfo } from "graphql";
import { AggregateSpeakerArgs } from "./args/AggregateSpeakerArgs";
import { CreateManySpeakerArgs } from "./args/CreateManySpeakerArgs";
import { CreateSpeakerArgs } from "./args/CreateSpeakerArgs";
import { DeleteManySpeakerArgs } from "./args/DeleteManySpeakerArgs";
import { DeleteSpeakerArgs } from "./args/DeleteSpeakerArgs";
import { FindFirstSpeakerArgs } from "./args/FindFirstSpeakerArgs";
import { FindManySpeakerArgs } from "./args/FindManySpeakerArgs";
import { FindUniqueSpeakerArgs } from "./args/FindUniqueSpeakerArgs";
import { GroupBySpeakerArgs } from "./args/GroupBySpeakerArgs";
import { UpdateManySpeakerArgs } from "./args/UpdateManySpeakerArgs";
import { UpdateSpeakerArgs } from "./args/UpdateSpeakerArgs";
import { UpsertSpeakerArgs } from "./args/UpsertSpeakerArgs";
import { Speaker } from "../../../models/Speaker";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSpeaker } from "../../outputs/AggregateSpeaker";
import { SpeakerGroupBy } from "../../outputs/SpeakerGroupBy";
export declare class SpeakerCrudResolver {
    speaker(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSpeakerArgs): Promise<Speaker | null>;
    findFirstSpeaker(ctx: any, info: GraphQLResolveInfo, args: FindFirstSpeakerArgs): Promise<Speaker | null>;
    speakers(ctx: any, info: GraphQLResolveInfo, args: FindManySpeakerArgs): Promise<Speaker[]>;
    createSpeaker(ctx: any, info: GraphQLResolveInfo, args: CreateSpeakerArgs): Promise<Speaker>;
    createManySpeaker(ctx: any, info: GraphQLResolveInfo, args: CreateManySpeakerArgs): Promise<AffectedRowsOutput>;
    deleteSpeaker(ctx: any, info: GraphQLResolveInfo, args: DeleteSpeakerArgs): Promise<Speaker | null>;
    updateSpeaker(ctx: any, info: GraphQLResolveInfo, args: UpdateSpeakerArgs): Promise<Speaker | null>;
    deleteManySpeaker(ctx: any, info: GraphQLResolveInfo, args: DeleteManySpeakerArgs): Promise<AffectedRowsOutput>;
    updateManySpeaker(ctx: any, info: GraphQLResolveInfo, args: UpdateManySpeakerArgs): Promise<AffectedRowsOutput>;
    upsertSpeaker(ctx: any, info: GraphQLResolveInfo, args: UpsertSpeakerArgs): Promise<Speaker>;
    aggregateSpeaker(ctx: any, info: GraphQLResolveInfo, args: AggregateSpeakerArgs): Promise<AggregateSpeaker>;
    groupBySpeaker(ctx: any, info: GraphQLResolveInfo, args: GroupBySpeakerArgs): Promise<SpeakerGroupBy[]>;
}
