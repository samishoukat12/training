"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupBySpeakerResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const GroupBySpeakerArgs_1 = require("./args/GroupBySpeakerArgs");
const Speaker_1 = require("../../../models/Speaker");
const SpeakerGroupBy_1 = require("../../outputs/SpeakerGroupBy");
const helpers_1 = require("../../../helpers");
let GroupBySpeakerResolver = class GroupBySpeakerResolver {
    async groupBySpeaker(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [SpeakerGroupBy_1.SpeakerGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupBySpeakerArgs_1.GroupBySpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], GroupBySpeakerResolver.prototype, "groupBySpeaker", null);
GroupBySpeakerResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Speaker_1.Speaker)
], GroupBySpeakerResolver);
exports.GroupBySpeakerResolver = GroupBySpeakerResolver;
