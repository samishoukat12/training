"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpeakerCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateSpeakerArgs_1 = require("./args/AggregateSpeakerArgs");
const CreateManySpeakerArgs_1 = require("./args/CreateManySpeakerArgs");
const CreateSpeakerArgs_1 = require("./args/CreateSpeakerArgs");
const DeleteManySpeakerArgs_1 = require("./args/DeleteManySpeakerArgs");
const DeleteSpeakerArgs_1 = require("./args/DeleteSpeakerArgs");
const FindFirstSpeakerArgs_1 = require("./args/FindFirstSpeakerArgs");
const FindManySpeakerArgs_1 = require("./args/FindManySpeakerArgs");
const FindUniqueSpeakerArgs_1 = require("./args/FindUniqueSpeakerArgs");
const GroupBySpeakerArgs_1 = require("./args/GroupBySpeakerArgs");
const UpdateManySpeakerArgs_1 = require("./args/UpdateManySpeakerArgs");
const UpdateSpeakerArgs_1 = require("./args/UpdateSpeakerArgs");
const UpsertSpeakerArgs_1 = require("./args/UpsertSpeakerArgs");
const helpers_1 = require("../../../helpers");
const Speaker_1 = require("../../../models/Speaker");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateSpeaker_1 = require("../../outputs/AggregateSpeaker");
const SpeakerGroupBy_1 = require("../../outputs/SpeakerGroupBy");
let SpeakerCrudResolver = class SpeakerCrudResolver {
    async speaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstSpeaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async speakers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createSpeaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManySpeaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteSpeaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateSpeaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManySpeaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManySpeaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertSpeaker(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateSpeaker(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupBySpeaker(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).speaker.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Speaker_1.Speaker, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueSpeakerArgs_1.FindUniqueSpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "speaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Speaker_1.Speaker, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstSpeakerArgs_1.FindFirstSpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "findFirstSpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Speaker_1.Speaker], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManySpeakerArgs_1.FindManySpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "speakers", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Speaker_1.Speaker, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateSpeakerArgs_1.CreateSpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "createSpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManySpeakerArgs_1.CreateManySpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "createManySpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Speaker_1.Speaker, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteSpeakerArgs_1.DeleteSpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "deleteSpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Speaker_1.Speaker, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateSpeakerArgs_1.UpdateSpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "updateSpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManySpeakerArgs_1.DeleteManySpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "deleteManySpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManySpeakerArgs_1.UpdateManySpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "updateManySpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Speaker_1.Speaker, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertSpeakerArgs_1.UpsertSpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "upsertSpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateSpeaker_1.AggregateSpeaker, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateSpeakerArgs_1.AggregateSpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "aggregateSpeaker", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [SpeakerGroupBy_1.SpeakerGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupBySpeakerArgs_1.GroupBySpeakerArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SpeakerCrudResolver.prototype, "groupBySpeaker", null);
SpeakerCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Speaker_1.Speaker)
], SpeakerCrudResolver);
exports.SpeakerCrudResolver = SpeakerCrudResolver;
