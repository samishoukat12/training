"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaqCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateFaqArgs_1 = require("./args/AggregateFaqArgs");
const CreateFaqArgs_1 = require("./args/CreateFaqArgs");
const CreateManyFaqArgs_1 = require("./args/CreateManyFaqArgs");
const DeleteFaqArgs_1 = require("./args/DeleteFaqArgs");
const DeleteManyFaqArgs_1 = require("./args/DeleteManyFaqArgs");
const FindFirstFaqArgs_1 = require("./args/FindFirstFaqArgs");
const FindManyFaqArgs_1 = require("./args/FindManyFaqArgs");
const FindUniqueFaqArgs_1 = require("./args/FindUniqueFaqArgs");
const GroupByFaqArgs_1 = require("./args/GroupByFaqArgs");
const UpdateFaqArgs_1 = require("./args/UpdateFaqArgs");
const UpdateManyFaqArgs_1 = require("./args/UpdateManyFaqArgs");
const UpsertFaqArgs_1 = require("./args/UpsertFaqArgs");
const helpers_1 = require("../../../helpers");
const Faq_1 = require("../../../models/Faq");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateFaq_1 = require("../../outputs/AggregateFaq");
const FaqGroupBy_1 = require("../../outputs/FaqGroupBy");
let FaqCrudResolver = class FaqCrudResolver {
    async faq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstFaq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async faqs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createFaq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyFaq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteFaq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateFaq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyFaq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyFaq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertFaq(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateFaq(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByFaq(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).faq.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Faq_1.Faq, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueFaqArgs_1.FindUniqueFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "faq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Faq_1.Faq, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstFaqArgs_1.FindFirstFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "findFirstFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Faq_1.Faq], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyFaqArgs_1.FindManyFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "faqs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Faq_1.Faq, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateFaqArgs_1.CreateFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "createFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyFaqArgs_1.CreateManyFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "createManyFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Faq_1.Faq, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteFaqArgs_1.DeleteFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "deleteFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Faq_1.Faq, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateFaqArgs_1.UpdateFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "updateFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyFaqArgs_1.DeleteManyFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "deleteManyFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyFaqArgs_1.UpdateManyFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "updateManyFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Faq_1.Faq, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertFaqArgs_1.UpsertFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "upsertFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateFaq_1.AggregateFaq, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateFaqArgs_1.AggregateFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "aggregateFaq", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [FaqGroupBy_1.FaqGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByFaqArgs_1.GroupByFaqArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FaqCrudResolver.prototype, "groupByFaq", null);
FaqCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Faq_1.Faq)
], FaqCrudResolver);
exports.FaqCrudResolver = FaqCrudResolver;
