import { GraphQLResolveInfo } from "graphql";
import { AggregateFaqArgs } from "./args/AggregateFaqArgs";
import { CreateFaqArgs } from "./args/CreateFaqArgs";
import { CreateManyFaqArgs } from "./args/CreateManyFaqArgs";
import { DeleteFaqArgs } from "./args/DeleteFaqArgs";
import { DeleteManyFaqArgs } from "./args/DeleteManyFaqArgs";
import { FindFirstFaqArgs } from "./args/FindFirstFaqArgs";
import { FindManyFaqArgs } from "./args/FindManyFaqArgs";
import { FindUniqueFaqArgs } from "./args/FindUniqueFaqArgs";
import { GroupByFaqArgs } from "./args/GroupByFaqArgs";
import { UpdateFaqArgs } from "./args/UpdateFaqArgs";
import { UpdateManyFaqArgs } from "./args/UpdateManyFaqArgs";
import { UpsertFaqArgs } from "./args/UpsertFaqArgs";
import { Faq } from "../../../models/Faq";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateFaq } from "../../outputs/AggregateFaq";
import { FaqGroupBy } from "../../outputs/FaqGroupBy";
export declare class FaqCrudResolver {
    faq(ctx: any, info: GraphQLResolveInfo, args: FindUniqueFaqArgs): Promise<Faq | null>;
    findFirstFaq(ctx: any, info: GraphQLResolveInfo, args: FindFirstFaqArgs): Promise<Faq | null>;
    faqs(ctx: any, info: GraphQLResolveInfo, args: FindManyFaqArgs): Promise<Faq[]>;
    createFaq(ctx: any, info: GraphQLResolveInfo, args: CreateFaqArgs): Promise<Faq>;
    createManyFaq(ctx: any, info: GraphQLResolveInfo, args: CreateManyFaqArgs): Promise<AffectedRowsOutput>;
    deleteFaq(ctx: any, info: GraphQLResolveInfo, args: DeleteFaqArgs): Promise<Faq | null>;
    updateFaq(ctx: any, info: GraphQLResolveInfo, args: UpdateFaqArgs): Promise<Faq | null>;
    deleteManyFaq(ctx: any, info: GraphQLResolveInfo, args: DeleteManyFaqArgs): Promise<AffectedRowsOutput>;
    updateManyFaq(ctx: any, info: GraphQLResolveInfo, args: UpdateManyFaqArgs): Promise<AffectedRowsOutput>;
    upsertFaq(ctx: any, info: GraphQLResolveInfo, args: UpsertFaqArgs): Promise<Faq>;
    aggregateFaq(ctx: any, info: GraphQLResolveInfo, args: AggregateFaqArgs): Promise<AggregateFaq>;
    groupByFaq(ctx: any, info: GraphQLResolveInfo, args: GroupByFaqArgs): Promise<FaqGroupBy[]>;
}
