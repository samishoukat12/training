import { GraphQLResolveInfo } from "graphql";
import { AggregateCoursesArgs } from "./args/AggregateCoursesArgs";
import { CreateCoursesArgs } from "./args/CreateCoursesArgs";
import { CreateManyCoursesArgs } from "./args/CreateManyCoursesArgs";
import { DeleteCoursesArgs } from "./args/DeleteCoursesArgs";
import { DeleteManyCoursesArgs } from "./args/DeleteManyCoursesArgs";
import { FindFirstCoursesArgs } from "./args/FindFirstCoursesArgs";
import { FindManyCoursesArgs } from "./args/FindManyCoursesArgs";
import { FindUniqueCoursesArgs } from "./args/FindUniqueCoursesArgs";
import { GroupByCoursesArgs } from "./args/GroupByCoursesArgs";
import { UpdateCoursesArgs } from "./args/UpdateCoursesArgs";
import { UpdateManyCoursesArgs } from "./args/UpdateManyCoursesArgs";
import { UpsertCoursesArgs } from "./args/UpsertCoursesArgs";
import { Courses } from "../../../models/Courses";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCourses } from "../../outputs/AggregateCourses";
import { CoursesGroupBy } from "../../outputs/CoursesGroupBy";
export declare class CoursesCrudResolver {
    findUniqueCourses(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCoursesArgs): Promise<Courses | null>;
    findFirstCourses(ctx: any, info: GraphQLResolveInfo, args: FindFirstCoursesArgs): Promise<Courses | null>;
    findManyCourses(ctx: any, info: GraphQLResolveInfo, args: FindManyCoursesArgs): Promise<Courses[]>;
    createCourses(ctx: any, info: GraphQLResolveInfo, args: CreateCoursesArgs): Promise<Courses>;
    createManyCourses(ctx: any, info: GraphQLResolveInfo, args: CreateManyCoursesArgs): Promise<AffectedRowsOutput>;
    deleteCourses(ctx: any, info: GraphQLResolveInfo, args: DeleteCoursesArgs): Promise<Courses | null>;
    updateCourses(ctx: any, info: GraphQLResolveInfo, args: UpdateCoursesArgs): Promise<Courses | null>;
    deleteManyCourses(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCoursesArgs): Promise<AffectedRowsOutput>;
    updateManyCourses(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCoursesArgs): Promise<AffectedRowsOutput>;
    upsertCourses(ctx: any, info: GraphQLResolveInfo, args: UpsertCoursesArgs): Promise<Courses>;
    aggregateCourses(ctx: any, info: GraphQLResolveInfo, args: AggregateCoursesArgs): Promise<AggregateCourses>;
    groupByCourses(ctx: any, info: GraphQLResolveInfo, args: GroupByCoursesArgs): Promise<CoursesGroupBy[]>;
}
