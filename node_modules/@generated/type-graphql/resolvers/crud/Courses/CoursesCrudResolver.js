"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoursesCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateCoursesArgs_1 = require("./args/AggregateCoursesArgs");
const CreateCoursesArgs_1 = require("./args/CreateCoursesArgs");
const CreateManyCoursesArgs_1 = require("./args/CreateManyCoursesArgs");
const DeleteCoursesArgs_1 = require("./args/DeleteCoursesArgs");
const DeleteManyCoursesArgs_1 = require("./args/DeleteManyCoursesArgs");
const FindFirstCoursesArgs_1 = require("./args/FindFirstCoursesArgs");
const FindManyCoursesArgs_1 = require("./args/FindManyCoursesArgs");
const FindUniqueCoursesArgs_1 = require("./args/FindUniqueCoursesArgs");
const GroupByCoursesArgs_1 = require("./args/GroupByCoursesArgs");
const UpdateCoursesArgs_1 = require("./args/UpdateCoursesArgs");
const UpdateManyCoursesArgs_1 = require("./args/UpdateManyCoursesArgs");
const UpsertCoursesArgs_1 = require("./args/UpsertCoursesArgs");
const helpers_1 = require("../../../helpers");
const Courses_1 = require("../../../models/Courses");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateCourses_1 = require("../../outputs/AggregateCourses");
const CoursesGroupBy_1 = require("../../outputs/CoursesGroupBy");
let CoursesCrudResolver = class CoursesCrudResolver {
    async findUniqueCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateCourses(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByCourses(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courses.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Courses_1.Courses, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueCoursesArgs_1.FindUniqueCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "findUniqueCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Courses_1.Courses, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstCoursesArgs_1.FindFirstCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "findFirstCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Courses_1.Courses], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyCoursesArgs_1.FindManyCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "findManyCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Courses_1.Courses, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateCoursesArgs_1.CreateCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "createCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyCoursesArgs_1.CreateManyCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "createManyCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Courses_1.Courses, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteCoursesArgs_1.DeleteCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "deleteCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Courses_1.Courses, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateCoursesArgs_1.UpdateCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "updateCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyCoursesArgs_1.DeleteManyCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "deleteManyCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyCoursesArgs_1.UpdateManyCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "updateManyCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Courses_1.Courses, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertCoursesArgs_1.UpsertCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "upsertCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateCourses_1.AggregateCourses, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateCoursesArgs_1.AggregateCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "aggregateCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [CoursesGroupBy_1.CoursesGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByCoursesArgs_1.GroupByCoursesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CoursesCrudResolver.prototype, "groupByCourses", null);
CoursesCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Courses_1.Courses)
], CoursesCrudResolver);
exports.CoursesCrudResolver = CoursesCrudResolver;
