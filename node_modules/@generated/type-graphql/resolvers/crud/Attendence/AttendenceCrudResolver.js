"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttendenceCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateAttendenceArgs_1 = require("./args/AggregateAttendenceArgs");
const CreateAttendenceArgs_1 = require("./args/CreateAttendenceArgs");
const CreateManyAttendenceArgs_1 = require("./args/CreateManyAttendenceArgs");
const DeleteAttendenceArgs_1 = require("./args/DeleteAttendenceArgs");
const DeleteManyAttendenceArgs_1 = require("./args/DeleteManyAttendenceArgs");
const FindFirstAttendenceArgs_1 = require("./args/FindFirstAttendenceArgs");
const FindManyAttendenceArgs_1 = require("./args/FindManyAttendenceArgs");
const FindUniqueAttendenceArgs_1 = require("./args/FindUniqueAttendenceArgs");
const GroupByAttendenceArgs_1 = require("./args/GroupByAttendenceArgs");
const UpdateAttendenceArgs_1 = require("./args/UpdateAttendenceArgs");
const UpdateManyAttendenceArgs_1 = require("./args/UpdateManyAttendenceArgs");
const UpsertAttendenceArgs_1 = require("./args/UpsertAttendenceArgs");
const helpers_1 = require("../../../helpers");
const Attendence_1 = require("../../../models/Attendence");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateAttendence_1 = require("../../outputs/AggregateAttendence");
const AttendenceGroupBy_1 = require("../../outputs/AttendenceGroupBy");
let AttendenceCrudResolver = class AttendenceCrudResolver {
    async attendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstAttendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async attendences(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createAttendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyAttendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteAttendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateAttendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyAttendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyAttendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertAttendence(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateAttendence(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByAttendence(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).attendence.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Attendence_1.Attendence, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueAttendenceArgs_1.FindUniqueAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "attendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Attendence_1.Attendence, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstAttendenceArgs_1.FindFirstAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "findFirstAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Attendence_1.Attendence], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyAttendenceArgs_1.FindManyAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "attendences", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Attendence_1.Attendence, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateAttendenceArgs_1.CreateAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "createAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyAttendenceArgs_1.CreateManyAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "createManyAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Attendence_1.Attendence, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteAttendenceArgs_1.DeleteAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "deleteAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Attendence_1.Attendence, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateAttendenceArgs_1.UpdateAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "updateAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyAttendenceArgs_1.DeleteManyAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "deleteManyAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyAttendenceArgs_1.UpdateManyAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "updateManyAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Attendence_1.Attendence, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertAttendenceArgs_1.UpsertAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "upsertAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateAttendence_1.AggregateAttendence, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateAttendenceArgs_1.AggregateAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "aggregateAttendence", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [AttendenceGroupBy_1.AttendenceGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByAttendenceArgs_1.GroupByAttendenceArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], AttendenceCrudResolver.prototype, "groupByAttendence", null);
AttendenceCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Attendence_1.Attendence)
], AttendenceCrudResolver);
exports.AttendenceCrudResolver = AttendenceCrudResolver;
