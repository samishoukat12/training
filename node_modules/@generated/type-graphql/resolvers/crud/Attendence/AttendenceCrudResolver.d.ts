import { GraphQLResolveInfo } from "graphql";
import { AggregateAttendenceArgs } from "./args/AggregateAttendenceArgs";
import { CreateAttendenceArgs } from "./args/CreateAttendenceArgs";
import { CreateManyAttendenceArgs } from "./args/CreateManyAttendenceArgs";
import { DeleteAttendenceArgs } from "./args/DeleteAttendenceArgs";
import { DeleteManyAttendenceArgs } from "./args/DeleteManyAttendenceArgs";
import { FindFirstAttendenceArgs } from "./args/FindFirstAttendenceArgs";
import { FindManyAttendenceArgs } from "./args/FindManyAttendenceArgs";
import { FindUniqueAttendenceArgs } from "./args/FindUniqueAttendenceArgs";
import { GroupByAttendenceArgs } from "./args/GroupByAttendenceArgs";
import { UpdateAttendenceArgs } from "./args/UpdateAttendenceArgs";
import { UpdateManyAttendenceArgs } from "./args/UpdateManyAttendenceArgs";
import { UpsertAttendenceArgs } from "./args/UpsertAttendenceArgs";
import { Attendence } from "../../../models/Attendence";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateAttendence } from "../../outputs/AggregateAttendence";
import { AttendenceGroupBy } from "../../outputs/AttendenceGroupBy";
export declare class AttendenceCrudResolver {
    attendence(ctx: any, info: GraphQLResolveInfo, args: FindUniqueAttendenceArgs): Promise<Attendence | null>;
    findFirstAttendence(ctx: any, info: GraphQLResolveInfo, args: FindFirstAttendenceArgs): Promise<Attendence | null>;
    attendences(ctx: any, info: GraphQLResolveInfo, args: FindManyAttendenceArgs): Promise<Attendence[]>;
    createAttendence(ctx: any, info: GraphQLResolveInfo, args: CreateAttendenceArgs): Promise<Attendence>;
    createManyAttendence(ctx: any, info: GraphQLResolveInfo, args: CreateManyAttendenceArgs): Promise<AffectedRowsOutput>;
    deleteAttendence(ctx: any, info: GraphQLResolveInfo, args: DeleteAttendenceArgs): Promise<Attendence | null>;
    updateAttendence(ctx: any, info: GraphQLResolveInfo, args: UpdateAttendenceArgs): Promise<Attendence | null>;
    deleteManyAttendence(ctx: any, info: GraphQLResolveInfo, args: DeleteManyAttendenceArgs): Promise<AffectedRowsOutput>;
    updateManyAttendence(ctx: any, info: GraphQLResolveInfo, args: UpdateManyAttendenceArgs): Promise<AffectedRowsOutput>;
    upsertAttendence(ctx: any, info: GraphQLResolveInfo, args: UpsertAttendenceArgs): Promise<Attendence>;
    aggregateAttendence(ctx: any, info: GraphQLResolveInfo, args: AggregateAttendenceArgs): Promise<AggregateAttendence>;
    groupByAttendence(ctx: any, info: GraphQLResolveInfo, args: GroupByAttendenceArgs): Promise<AttendenceGroupBy[]>;
}
