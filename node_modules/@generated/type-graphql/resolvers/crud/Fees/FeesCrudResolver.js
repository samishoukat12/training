"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeesCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateFeesArgs_1 = require("./args/AggregateFeesArgs");
const CreateFeesArgs_1 = require("./args/CreateFeesArgs");
const CreateManyFeesArgs_1 = require("./args/CreateManyFeesArgs");
const DeleteFeesArgs_1 = require("./args/DeleteFeesArgs");
const DeleteManyFeesArgs_1 = require("./args/DeleteManyFeesArgs");
const FindFirstFeesArgs_1 = require("./args/FindFirstFeesArgs");
const FindManyFeesArgs_1 = require("./args/FindManyFeesArgs");
const FindUniqueFeesArgs_1 = require("./args/FindUniqueFeesArgs");
const GroupByFeesArgs_1 = require("./args/GroupByFeesArgs");
const UpdateFeesArgs_1 = require("./args/UpdateFeesArgs");
const UpdateManyFeesArgs_1 = require("./args/UpdateManyFeesArgs");
const UpsertFeesArgs_1 = require("./args/UpsertFeesArgs");
const helpers_1 = require("../../../helpers");
const Fees_1 = require("../../../models/Fees");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateFees_1 = require("../../outputs/AggregateFees");
const FeesGroupBy_1 = require("../../outputs/FeesGroupBy");
let FeesCrudResolver = class FeesCrudResolver {
    async findUniqueFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertFees(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateFees(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByFees(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).fees.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Fees_1.Fees, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueFeesArgs_1.FindUniqueFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "findUniqueFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Fees_1.Fees, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstFeesArgs_1.FindFirstFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "findFirstFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Fees_1.Fees], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyFeesArgs_1.FindManyFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "findManyFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Fees_1.Fees, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateFeesArgs_1.CreateFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "createFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyFeesArgs_1.CreateManyFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "createManyFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Fees_1.Fees, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteFeesArgs_1.DeleteFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "deleteFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Fees_1.Fees, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateFeesArgs_1.UpdateFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "updateFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyFeesArgs_1.DeleteManyFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "deleteManyFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyFeesArgs_1.UpdateManyFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "updateManyFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Fees_1.Fees, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertFeesArgs_1.UpsertFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "upsertFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateFees_1.AggregateFees, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateFeesArgs_1.AggregateFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "aggregateFees", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [FeesGroupBy_1.FeesGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByFeesArgs_1.GroupByFeesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], FeesCrudResolver.prototype, "groupByFees", null);
FeesCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Fees_1.Fees)
], FeesCrudResolver);
exports.FeesCrudResolver = FeesCrudResolver;
