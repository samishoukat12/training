import { GraphQLResolveInfo } from "graphql";
import { AggregateFeesArgs } from "./args/AggregateFeesArgs";
import { CreateFeesArgs } from "./args/CreateFeesArgs";
import { CreateManyFeesArgs } from "./args/CreateManyFeesArgs";
import { DeleteFeesArgs } from "./args/DeleteFeesArgs";
import { DeleteManyFeesArgs } from "./args/DeleteManyFeesArgs";
import { FindFirstFeesArgs } from "./args/FindFirstFeesArgs";
import { FindManyFeesArgs } from "./args/FindManyFeesArgs";
import { FindUniqueFeesArgs } from "./args/FindUniqueFeesArgs";
import { GroupByFeesArgs } from "./args/GroupByFeesArgs";
import { UpdateFeesArgs } from "./args/UpdateFeesArgs";
import { UpdateManyFeesArgs } from "./args/UpdateManyFeesArgs";
import { UpsertFeesArgs } from "./args/UpsertFeesArgs";
import { Fees } from "../../../models/Fees";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateFees } from "../../outputs/AggregateFees";
import { FeesGroupBy } from "../../outputs/FeesGroupBy";
export declare class FeesCrudResolver {
    findUniqueFees(ctx: any, info: GraphQLResolveInfo, args: FindUniqueFeesArgs): Promise<Fees | null>;
    findFirstFees(ctx: any, info: GraphQLResolveInfo, args: FindFirstFeesArgs): Promise<Fees | null>;
    findManyFees(ctx: any, info: GraphQLResolveInfo, args: FindManyFeesArgs): Promise<Fees[]>;
    createFees(ctx: any, info: GraphQLResolveInfo, args: CreateFeesArgs): Promise<Fees>;
    createManyFees(ctx: any, info: GraphQLResolveInfo, args: CreateManyFeesArgs): Promise<AffectedRowsOutput>;
    deleteFees(ctx: any, info: GraphQLResolveInfo, args: DeleteFeesArgs): Promise<Fees | null>;
    updateFees(ctx: any, info: GraphQLResolveInfo, args: UpdateFeesArgs): Promise<Fees | null>;
    deleteManyFees(ctx: any, info: GraphQLResolveInfo, args: DeleteManyFeesArgs): Promise<AffectedRowsOutput>;
    updateManyFees(ctx: any, info: GraphQLResolveInfo, args: UpdateManyFeesArgs): Promise<AffectedRowsOutput>;
    upsertFees(ctx: any, info: GraphQLResolveInfo, args: UpsertFeesArgs): Promise<Fees>;
    aggregateFees(ctx: any, info: GraphQLResolveInfo, args: AggregateFeesArgs): Promise<AggregateFees>;
    groupByFees(ctx: any, info: GraphQLResolveInfo, args: GroupByFeesArgs): Promise<FeesGroupBy[]>;
}
