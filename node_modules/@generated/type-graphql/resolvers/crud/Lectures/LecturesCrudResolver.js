"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LecturesCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateLecturesArgs_1 = require("./args/AggregateLecturesArgs");
const CreateLecturesArgs_1 = require("./args/CreateLecturesArgs");
const CreateManyLecturesArgs_1 = require("./args/CreateManyLecturesArgs");
const DeleteLecturesArgs_1 = require("./args/DeleteLecturesArgs");
const DeleteManyLecturesArgs_1 = require("./args/DeleteManyLecturesArgs");
const FindFirstLecturesArgs_1 = require("./args/FindFirstLecturesArgs");
const FindManyLecturesArgs_1 = require("./args/FindManyLecturesArgs");
const FindUniqueLecturesArgs_1 = require("./args/FindUniqueLecturesArgs");
const GroupByLecturesArgs_1 = require("./args/GroupByLecturesArgs");
const UpdateLecturesArgs_1 = require("./args/UpdateLecturesArgs");
const UpdateManyLecturesArgs_1 = require("./args/UpdateManyLecturesArgs");
const UpsertLecturesArgs_1 = require("./args/UpsertLecturesArgs");
const helpers_1 = require("../../../helpers");
const Lectures_1 = require("../../../models/Lectures");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateLectures_1 = require("../../outputs/AggregateLectures");
const LecturesGroupBy_1 = require("../../outputs/LecturesGroupBy");
let LecturesCrudResolver = class LecturesCrudResolver {
    async findUniqueLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertLectures(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateLectures(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByLectures(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).lectures.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Lectures_1.Lectures, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueLecturesArgs_1.FindUniqueLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "findUniqueLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Lectures_1.Lectures, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstLecturesArgs_1.FindFirstLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "findFirstLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Lectures_1.Lectures], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyLecturesArgs_1.FindManyLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "findManyLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Lectures_1.Lectures, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateLecturesArgs_1.CreateLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "createLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyLecturesArgs_1.CreateManyLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "createManyLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Lectures_1.Lectures, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteLecturesArgs_1.DeleteLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "deleteLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Lectures_1.Lectures, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateLecturesArgs_1.UpdateLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "updateLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyLecturesArgs_1.DeleteManyLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "deleteManyLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyLecturesArgs_1.UpdateManyLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "updateManyLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Lectures_1.Lectures, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertLecturesArgs_1.UpsertLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "upsertLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateLectures_1.AggregateLectures, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateLecturesArgs_1.AggregateLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "aggregateLectures", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [LecturesGroupBy_1.LecturesGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByLecturesArgs_1.GroupByLecturesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], LecturesCrudResolver.prototype, "groupByLectures", null);
LecturesCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Lectures_1.Lectures)
], LecturesCrudResolver);
exports.LecturesCrudResolver = LecturesCrudResolver;
