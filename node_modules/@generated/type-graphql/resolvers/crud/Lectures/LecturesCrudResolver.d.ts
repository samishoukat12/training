import { GraphQLResolveInfo } from "graphql";
import { AggregateLecturesArgs } from "./args/AggregateLecturesArgs";
import { CreateLecturesArgs } from "./args/CreateLecturesArgs";
import { CreateManyLecturesArgs } from "./args/CreateManyLecturesArgs";
import { DeleteLecturesArgs } from "./args/DeleteLecturesArgs";
import { DeleteManyLecturesArgs } from "./args/DeleteManyLecturesArgs";
import { FindFirstLecturesArgs } from "./args/FindFirstLecturesArgs";
import { FindManyLecturesArgs } from "./args/FindManyLecturesArgs";
import { FindUniqueLecturesArgs } from "./args/FindUniqueLecturesArgs";
import { GroupByLecturesArgs } from "./args/GroupByLecturesArgs";
import { UpdateLecturesArgs } from "./args/UpdateLecturesArgs";
import { UpdateManyLecturesArgs } from "./args/UpdateManyLecturesArgs";
import { UpsertLecturesArgs } from "./args/UpsertLecturesArgs";
import { Lectures } from "../../../models/Lectures";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateLectures } from "../../outputs/AggregateLectures";
import { LecturesGroupBy } from "../../outputs/LecturesGroupBy";
export declare class LecturesCrudResolver {
    findUniqueLectures(ctx: any, info: GraphQLResolveInfo, args: FindUniqueLecturesArgs): Promise<Lectures | null>;
    findFirstLectures(ctx: any, info: GraphQLResolveInfo, args: FindFirstLecturesArgs): Promise<Lectures | null>;
    findManyLectures(ctx: any, info: GraphQLResolveInfo, args: FindManyLecturesArgs): Promise<Lectures[]>;
    createLectures(ctx: any, info: GraphQLResolveInfo, args: CreateLecturesArgs): Promise<Lectures>;
    createManyLectures(ctx: any, info: GraphQLResolveInfo, args: CreateManyLecturesArgs): Promise<AffectedRowsOutput>;
    deleteLectures(ctx: any, info: GraphQLResolveInfo, args: DeleteLecturesArgs): Promise<Lectures | null>;
    updateLectures(ctx: any, info: GraphQLResolveInfo, args: UpdateLecturesArgs): Promise<Lectures | null>;
    deleteManyLectures(ctx: any, info: GraphQLResolveInfo, args: DeleteManyLecturesArgs): Promise<AffectedRowsOutput>;
    updateManyLectures(ctx: any, info: GraphQLResolveInfo, args: UpdateManyLecturesArgs): Promise<AffectedRowsOutput>;
    upsertLectures(ctx: any, info: GraphQLResolveInfo, args: UpsertLecturesArgs): Promise<Lectures>;
    aggregateLectures(ctx: any, info: GraphQLResolveInfo, args: AggregateLecturesArgs): Promise<AggregateLectures>;
    groupByLectures(ctx: any, info: GraphQLResolveInfo, args: GroupByLecturesArgs): Promise<LecturesGroupBy[]>;
}
