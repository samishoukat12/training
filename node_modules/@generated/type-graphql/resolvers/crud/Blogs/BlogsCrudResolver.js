"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlogsCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateBlogsArgs_1 = require("./args/AggregateBlogsArgs");
const CreateBlogsArgs_1 = require("./args/CreateBlogsArgs");
const CreateManyBlogsArgs_1 = require("./args/CreateManyBlogsArgs");
const DeleteBlogsArgs_1 = require("./args/DeleteBlogsArgs");
const DeleteManyBlogsArgs_1 = require("./args/DeleteManyBlogsArgs");
const FindFirstBlogsArgs_1 = require("./args/FindFirstBlogsArgs");
const FindManyBlogsArgs_1 = require("./args/FindManyBlogsArgs");
const FindUniqueBlogsArgs_1 = require("./args/FindUniqueBlogsArgs");
const GroupByBlogsArgs_1 = require("./args/GroupByBlogsArgs");
const UpdateBlogsArgs_1 = require("./args/UpdateBlogsArgs");
const UpdateManyBlogsArgs_1 = require("./args/UpdateManyBlogsArgs");
const UpsertBlogsArgs_1 = require("./args/UpsertBlogsArgs");
const helpers_1 = require("../../../helpers");
const Blogs_1 = require("../../../models/Blogs");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateBlogs_1 = require("../../outputs/AggregateBlogs");
const BlogsGroupBy_1 = require("../../outputs/BlogsGroupBy");
let BlogsCrudResolver = class BlogsCrudResolver {
    async findUniqueBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertBlogs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateBlogs(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByBlogs(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).blogs.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Blogs_1.Blogs, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueBlogsArgs_1.FindUniqueBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "findUniqueBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Blogs_1.Blogs, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstBlogsArgs_1.FindFirstBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "findFirstBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Blogs_1.Blogs], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyBlogsArgs_1.FindManyBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "findManyBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Blogs_1.Blogs, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateBlogsArgs_1.CreateBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "createBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyBlogsArgs_1.CreateManyBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "createManyBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Blogs_1.Blogs, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteBlogsArgs_1.DeleteBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "deleteBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Blogs_1.Blogs, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateBlogsArgs_1.UpdateBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "updateBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyBlogsArgs_1.DeleteManyBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "deleteManyBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyBlogsArgs_1.UpdateManyBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "updateManyBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Blogs_1.Blogs, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertBlogsArgs_1.UpsertBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "upsertBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateBlogs_1.AggregateBlogs, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateBlogsArgs_1.AggregateBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "aggregateBlogs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [BlogsGroupBy_1.BlogsGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByBlogsArgs_1.GroupByBlogsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], BlogsCrudResolver.prototype, "groupByBlogs", null);
BlogsCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Blogs_1.Blogs)
], BlogsCrudResolver);
exports.BlogsCrudResolver = BlogsCrudResolver;
