import { GraphQLResolveInfo } from "graphql";
import { AggregateBlogsArgs } from "./args/AggregateBlogsArgs";
import { CreateBlogsArgs } from "./args/CreateBlogsArgs";
import { CreateManyBlogsArgs } from "./args/CreateManyBlogsArgs";
import { DeleteBlogsArgs } from "./args/DeleteBlogsArgs";
import { DeleteManyBlogsArgs } from "./args/DeleteManyBlogsArgs";
import { FindFirstBlogsArgs } from "./args/FindFirstBlogsArgs";
import { FindManyBlogsArgs } from "./args/FindManyBlogsArgs";
import { FindUniqueBlogsArgs } from "./args/FindUniqueBlogsArgs";
import { GroupByBlogsArgs } from "./args/GroupByBlogsArgs";
import { UpdateBlogsArgs } from "./args/UpdateBlogsArgs";
import { UpdateManyBlogsArgs } from "./args/UpdateManyBlogsArgs";
import { UpsertBlogsArgs } from "./args/UpsertBlogsArgs";
import { Blogs } from "../../../models/Blogs";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateBlogs } from "../../outputs/AggregateBlogs";
import { BlogsGroupBy } from "../../outputs/BlogsGroupBy";
export declare class BlogsCrudResolver {
    findUniqueBlogs(ctx: any, info: GraphQLResolveInfo, args: FindUniqueBlogsArgs): Promise<Blogs | null>;
    findFirstBlogs(ctx: any, info: GraphQLResolveInfo, args: FindFirstBlogsArgs): Promise<Blogs | null>;
    findManyBlogs(ctx: any, info: GraphQLResolveInfo, args: FindManyBlogsArgs): Promise<Blogs[]>;
    createBlogs(ctx: any, info: GraphQLResolveInfo, args: CreateBlogsArgs): Promise<Blogs>;
    createManyBlogs(ctx: any, info: GraphQLResolveInfo, args: CreateManyBlogsArgs): Promise<AffectedRowsOutput>;
    deleteBlogs(ctx: any, info: GraphQLResolveInfo, args: DeleteBlogsArgs): Promise<Blogs | null>;
    updateBlogs(ctx: any, info: GraphQLResolveInfo, args: UpdateBlogsArgs): Promise<Blogs | null>;
    deleteManyBlogs(ctx: any, info: GraphQLResolveInfo, args: DeleteManyBlogsArgs): Promise<AffectedRowsOutput>;
    updateManyBlogs(ctx: any, info: GraphQLResolveInfo, args: UpdateManyBlogsArgs): Promise<AffectedRowsOutput>;
    upsertBlogs(ctx: any, info: GraphQLResolveInfo, args: UpsertBlogsArgs): Promise<Blogs>;
    aggregateBlogs(ctx: any, info: GraphQLResolveInfo, args: AggregateBlogsArgs): Promise<AggregateBlogs>;
    groupByBlogs(ctx: any, info: GraphQLResolveInfo, args: GroupByBlogsArgs): Promise<BlogsGroupBy[]>;
}
