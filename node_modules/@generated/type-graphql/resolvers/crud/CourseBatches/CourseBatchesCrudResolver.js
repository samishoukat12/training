"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CourseBatchesCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateCourseBatchesArgs_1 = require("./args/AggregateCourseBatchesArgs");
const CreateCourseBatchesArgs_1 = require("./args/CreateCourseBatchesArgs");
const CreateManyCourseBatchesArgs_1 = require("./args/CreateManyCourseBatchesArgs");
const DeleteCourseBatchesArgs_1 = require("./args/DeleteCourseBatchesArgs");
const DeleteManyCourseBatchesArgs_1 = require("./args/DeleteManyCourseBatchesArgs");
const FindFirstCourseBatchesArgs_1 = require("./args/FindFirstCourseBatchesArgs");
const FindManyCourseBatchesArgs_1 = require("./args/FindManyCourseBatchesArgs");
const FindUniqueCourseBatchesArgs_1 = require("./args/FindUniqueCourseBatchesArgs");
const GroupByCourseBatchesArgs_1 = require("./args/GroupByCourseBatchesArgs");
const UpdateCourseBatchesArgs_1 = require("./args/UpdateCourseBatchesArgs");
const UpdateManyCourseBatchesArgs_1 = require("./args/UpdateManyCourseBatchesArgs");
const UpsertCourseBatchesArgs_1 = require("./args/UpsertCourseBatchesArgs");
const helpers_1 = require("../../../helpers");
const CourseBatches_1 = require("../../../models/CourseBatches");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateCourseBatches_1 = require("../../outputs/AggregateCourseBatches");
const CourseBatchesGroupBy_1 = require("../../outputs/CourseBatchesGroupBy");
let CourseBatchesCrudResolver = class CourseBatchesCrudResolver {
    async findUniqueCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertCourseBatches(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateCourseBatches(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByCourseBatches(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseBatches.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => CourseBatches_1.CourseBatches, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueCourseBatchesArgs_1.FindUniqueCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "findUniqueCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => CourseBatches_1.CourseBatches, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstCourseBatchesArgs_1.FindFirstCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "findFirstCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [CourseBatches_1.CourseBatches], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyCourseBatchesArgs_1.FindManyCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "findManyCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => CourseBatches_1.CourseBatches, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateCourseBatchesArgs_1.CreateCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "createCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyCourseBatchesArgs_1.CreateManyCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "createManyCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => CourseBatches_1.CourseBatches, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteCourseBatchesArgs_1.DeleteCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "deleteCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => CourseBatches_1.CourseBatches, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateCourseBatchesArgs_1.UpdateCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "updateCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyCourseBatchesArgs_1.DeleteManyCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "deleteManyCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyCourseBatchesArgs_1.UpdateManyCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "updateManyCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => CourseBatches_1.CourseBatches, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertCourseBatchesArgs_1.UpsertCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "upsertCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateCourseBatches_1.AggregateCourseBatches, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateCourseBatchesArgs_1.AggregateCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "aggregateCourseBatches", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [CourseBatchesGroupBy_1.CourseBatchesGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByCourseBatchesArgs_1.GroupByCourseBatchesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseBatchesCrudResolver.prototype, "groupByCourseBatches", null);
CourseBatchesCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => CourseBatches_1.CourseBatches)
], CourseBatchesCrudResolver);
exports.CourseBatchesCrudResolver = CourseBatchesCrudResolver;
