import { GraphQLResolveInfo } from "graphql";
import { AggregateCourseBatchesArgs } from "./args/AggregateCourseBatchesArgs";
import { CreateCourseBatchesArgs } from "./args/CreateCourseBatchesArgs";
import { CreateManyCourseBatchesArgs } from "./args/CreateManyCourseBatchesArgs";
import { DeleteCourseBatchesArgs } from "./args/DeleteCourseBatchesArgs";
import { DeleteManyCourseBatchesArgs } from "./args/DeleteManyCourseBatchesArgs";
import { FindFirstCourseBatchesArgs } from "./args/FindFirstCourseBatchesArgs";
import { FindManyCourseBatchesArgs } from "./args/FindManyCourseBatchesArgs";
import { FindUniqueCourseBatchesArgs } from "./args/FindUniqueCourseBatchesArgs";
import { GroupByCourseBatchesArgs } from "./args/GroupByCourseBatchesArgs";
import { UpdateCourseBatchesArgs } from "./args/UpdateCourseBatchesArgs";
import { UpdateManyCourseBatchesArgs } from "./args/UpdateManyCourseBatchesArgs";
import { UpsertCourseBatchesArgs } from "./args/UpsertCourseBatchesArgs";
import { CourseBatches } from "../../../models/CourseBatches";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCourseBatches } from "../../outputs/AggregateCourseBatches";
import { CourseBatchesGroupBy } from "../../outputs/CourseBatchesGroupBy";
export declare class CourseBatchesCrudResolver {
    findUniqueCourseBatches(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCourseBatchesArgs): Promise<CourseBatches | null>;
    findFirstCourseBatches(ctx: any, info: GraphQLResolveInfo, args: FindFirstCourseBatchesArgs): Promise<CourseBatches | null>;
    findManyCourseBatches(ctx: any, info: GraphQLResolveInfo, args: FindManyCourseBatchesArgs): Promise<CourseBatches[]>;
    createCourseBatches(ctx: any, info: GraphQLResolveInfo, args: CreateCourseBatchesArgs): Promise<CourseBatches>;
    createManyCourseBatches(ctx: any, info: GraphQLResolveInfo, args: CreateManyCourseBatchesArgs): Promise<AffectedRowsOutput>;
    deleteCourseBatches(ctx: any, info: GraphQLResolveInfo, args: DeleteCourseBatchesArgs): Promise<CourseBatches | null>;
    updateCourseBatches(ctx: any, info: GraphQLResolveInfo, args: UpdateCourseBatchesArgs): Promise<CourseBatches | null>;
    deleteManyCourseBatches(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCourseBatchesArgs): Promise<AffectedRowsOutput>;
    updateManyCourseBatches(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCourseBatchesArgs): Promise<AffectedRowsOutput>;
    upsertCourseBatches(ctx: any, info: GraphQLResolveInfo, args: UpsertCourseBatchesArgs): Promise<CourseBatches>;
    aggregateCourseBatches(ctx: any, info: GraphQLResolveInfo, args: AggregateCourseBatchesArgs): Promise<AggregateCourseBatches>;
    groupByCourseBatches(ctx: any, info: GraphQLResolveInfo, args: GroupByCourseBatchesArgs): Promise<CourseBatchesGroupBy[]>;
}
