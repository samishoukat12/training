import { GraphQLResolveInfo } from "graphql";
import { AggregateCourseAssignmentArgs } from "./args/AggregateCourseAssignmentArgs";
import { CreateCourseAssignmentArgs } from "./args/CreateCourseAssignmentArgs";
import { CreateManyCourseAssignmentArgs } from "./args/CreateManyCourseAssignmentArgs";
import { DeleteCourseAssignmentArgs } from "./args/DeleteCourseAssignmentArgs";
import { DeleteManyCourseAssignmentArgs } from "./args/DeleteManyCourseAssignmentArgs";
import { FindFirstCourseAssignmentArgs } from "./args/FindFirstCourseAssignmentArgs";
import { FindManyCourseAssignmentArgs } from "./args/FindManyCourseAssignmentArgs";
import { FindUniqueCourseAssignmentArgs } from "./args/FindUniqueCourseAssignmentArgs";
import { GroupByCourseAssignmentArgs } from "./args/GroupByCourseAssignmentArgs";
import { UpdateCourseAssignmentArgs } from "./args/UpdateCourseAssignmentArgs";
import { UpdateManyCourseAssignmentArgs } from "./args/UpdateManyCourseAssignmentArgs";
import { UpsertCourseAssignmentArgs } from "./args/UpsertCourseAssignmentArgs";
import { CourseAssignment } from "../../../models/CourseAssignment";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCourseAssignment } from "../../outputs/AggregateCourseAssignment";
import { CourseAssignmentGroupBy } from "../../outputs/CourseAssignmentGroupBy";
export declare class CourseAssignmentCrudResolver {
    courseAssignment(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCourseAssignmentArgs): Promise<CourseAssignment | null>;
    findFirstCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: FindFirstCourseAssignmentArgs): Promise<CourseAssignment | null>;
    courseAssignments(ctx: any, info: GraphQLResolveInfo, args: FindManyCourseAssignmentArgs): Promise<CourseAssignment[]>;
    createCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: CreateCourseAssignmentArgs): Promise<CourseAssignment>;
    createManyCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: CreateManyCourseAssignmentArgs): Promise<AffectedRowsOutput>;
    deleteCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: DeleteCourseAssignmentArgs): Promise<CourseAssignment | null>;
    updateCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: UpdateCourseAssignmentArgs): Promise<CourseAssignment | null>;
    deleteManyCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCourseAssignmentArgs): Promise<AffectedRowsOutput>;
    updateManyCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCourseAssignmentArgs): Promise<AffectedRowsOutput>;
    upsertCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: UpsertCourseAssignmentArgs): Promise<CourseAssignment>;
    aggregateCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: AggregateCourseAssignmentArgs): Promise<AggregateCourseAssignment>;
    groupByCourseAssignment(ctx: any, info: GraphQLResolveInfo, args: GroupByCourseAssignmentArgs): Promise<CourseAssignmentGroupBy[]>;
}
