"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CourseAssignmentCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateCourseAssignmentArgs_1 = require("./args/AggregateCourseAssignmentArgs");
const CreateCourseAssignmentArgs_1 = require("./args/CreateCourseAssignmentArgs");
const CreateManyCourseAssignmentArgs_1 = require("./args/CreateManyCourseAssignmentArgs");
const DeleteCourseAssignmentArgs_1 = require("./args/DeleteCourseAssignmentArgs");
const DeleteManyCourseAssignmentArgs_1 = require("./args/DeleteManyCourseAssignmentArgs");
const FindFirstCourseAssignmentArgs_1 = require("./args/FindFirstCourseAssignmentArgs");
const FindManyCourseAssignmentArgs_1 = require("./args/FindManyCourseAssignmentArgs");
const FindUniqueCourseAssignmentArgs_1 = require("./args/FindUniqueCourseAssignmentArgs");
const GroupByCourseAssignmentArgs_1 = require("./args/GroupByCourseAssignmentArgs");
const UpdateCourseAssignmentArgs_1 = require("./args/UpdateCourseAssignmentArgs");
const UpdateManyCourseAssignmentArgs_1 = require("./args/UpdateManyCourseAssignmentArgs");
const UpsertCourseAssignmentArgs_1 = require("./args/UpsertCourseAssignmentArgs");
const helpers_1 = require("../../../helpers");
const CourseAssignment_1 = require("../../../models/CourseAssignment");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateCourseAssignment_1 = require("../../outputs/AggregateCourseAssignment");
const CourseAssignmentGroupBy_1 = require("../../outputs/CourseAssignmentGroupBy");
let CourseAssignmentCrudResolver = class CourseAssignmentCrudResolver {
    async courseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstCourseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async courseAssignments(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createCourseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyCourseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteCourseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateCourseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyCourseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyCourseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertCourseAssignment(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateCourseAssignment(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByCourseAssignment(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).courseAssignment.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => CourseAssignment_1.CourseAssignment, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueCourseAssignmentArgs_1.FindUniqueCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "courseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => CourseAssignment_1.CourseAssignment, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstCourseAssignmentArgs_1.FindFirstCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "findFirstCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [CourseAssignment_1.CourseAssignment], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyCourseAssignmentArgs_1.FindManyCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "courseAssignments", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => CourseAssignment_1.CourseAssignment, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateCourseAssignmentArgs_1.CreateCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "createCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyCourseAssignmentArgs_1.CreateManyCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "createManyCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => CourseAssignment_1.CourseAssignment, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteCourseAssignmentArgs_1.DeleteCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "deleteCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => CourseAssignment_1.CourseAssignment, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateCourseAssignmentArgs_1.UpdateCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "updateCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyCourseAssignmentArgs_1.DeleteManyCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "deleteManyCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyCourseAssignmentArgs_1.UpdateManyCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "updateManyCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => CourseAssignment_1.CourseAssignment, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertCourseAssignmentArgs_1.UpsertCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "upsertCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateCourseAssignment_1.AggregateCourseAssignment, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateCourseAssignmentArgs_1.AggregateCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "aggregateCourseAssignment", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [CourseAssignmentGroupBy_1.CourseAssignmentGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByCourseAssignmentArgs_1.GroupByCourseAssignmentArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], CourseAssignmentCrudResolver.prototype, "groupByCourseAssignment", null);
CourseAssignmentCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => CourseAssignment_1.CourseAssignment)
], CourseAssignmentCrudResolver);
exports.CourseAssignmentCrudResolver = CourseAssignmentCrudResolver;
