"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaffCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateStaffArgs_1 = require("./args/AggregateStaffArgs");
const CreateManyStaffArgs_1 = require("./args/CreateManyStaffArgs");
const CreateStaffArgs_1 = require("./args/CreateStaffArgs");
const DeleteManyStaffArgs_1 = require("./args/DeleteManyStaffArgs");
const DeleteStaffArgs_1 = require("./args/DeleteStaffArgs");
const FindFirstStaffArgs_1 = require("./args/FindFirstStaffArgs");
const FindManyStaffArgs_1 = require("./args/FindManyStaffArgs");
const FindUniqueStaffArgs_1 = require("./args/FindUniqueStaffArgs");
const GroupByStaffArgs_1 = require("./args/GroupByStaffArgs");
const UpdateManyStaffArgs_1 = require("./args/UpdateManyStaffArgs");
const UpdateStaffArgs_1 = require("./args/UpdateStaffArgs");
const UpsertStaffArgs_1 = require("./args/UpsertStaffArgs");
const helpers_1 = require("../../../helpers");
const Staff_1 = require("../../../models/Staff");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateStaff_1 = require("../../outputs/AggregateStaff");
const StaffGroupBy_1 = require("../../outputs/StaffGroupBy");
let StaffCrudResolver = class StaffCrudResolver {
    async findUniqueStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertStaff(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateStaff(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByStaff(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).staff.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Staff_1.Staff, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueStaffArgs_1.FindUniqueStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "findUniqueStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Staff_1.Staff, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstStaffArgs_1.FindFirstStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "findFirstStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Staff_1.Staff], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyStaffArgs_1.FindManyStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "findManyStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Staff_1.Staff, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateStaffArgs_1.CreateStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "createStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyStaffArgs_1.CreateManyStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "createManyStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Staff_1.Staff, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteStaffArgs_1.DeleteStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "deleteStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Staff_1.Staff, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateStaffArgs_1.UpdateStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "updateStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyStaffArgs_1.DeleteManyStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "deleteManyStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyStaffArgs_1.UpdateManyStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "updateManyStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Staff_1.Staff, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertStaffArgs_1.UpsertStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "upsertStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateStaff_1.AggregateStaff, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateStaffArgs_1.AggregateStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "aggregateStaff", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [StaffGroupBy_1.StaffGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByStaffArgs_1.GroupByStaffArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], StaffCrudResolver.prototype, "groupByStaff", null);
StaffCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Staff_1.Staff)
], StaffCrudResolver);
exports.StaffCrudResolver = StaffCrudResolver;
