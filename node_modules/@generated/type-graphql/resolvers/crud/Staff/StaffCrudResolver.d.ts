import { GraphQLResolveInfo } from "graphql";
import { AggregateStaffArgs } from "./args/AggregateStaffArgs";
import { CreateManyStaffArgs } from "./args/CreateManyStaffArgs";
import { CreateStaffArgs } from "./args/CreateStaffArgs";
import { DeleteManyStaffArgs } from "./args/DeleteManyStaffArgs";
import { DeleteStaffArgs } from "./args/DeleteStaffArgs";
import { FindFirstStaffArgs } from "./args/FindFirstStaffArgs";
import { FindManyStaffArgs } from "./args/FindManyStaffArgs";
import { FindUniqueStaffArgs } from "./args/FindUniqueStaffArgs";
import { GroupByStaffArgs } from "./args/GroupByStaffArgs";
import { UpdateManyStaffArgs } from "./args/UpdateManyStaffArgs";
import { UpdateStaffArgs } from "./args/UpdateStaffArgs";
import { UpsertStaffArgs } from "./args/UpsertStaffArgs";
import { Staff } from "../../../models/Staff";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateStaff } from "../../outputs/AggregateStaff";
import { StaffGroupBy } from "../../outputs/StaffGroupBy";
export declare class StaffCrudResolver {
    findUniqueStaff(ctx: any, info: GraphQLResolveInfo, args: FindUniqueStaffArgs): Promise<Staff | null>;
    findFirstStaff(ctx: any, info: GraphQLResolveInfo, args: FindFirstStaffArgs): Promise<Staff | null>;
    findManyStaff(ctx: any, info: GraphQLResolveInfo, args: FindManyStaffArgs): Promise<Staff[]>;
    createStaff(ctx: any, info: GraphQLResolveInfo, args: CreateStaffArgs): Promise<Staff>;
    createManyStaff(ctx: any, info: GraphQLResolveInfo, args: CreateManyStaffArgs): Promise<AffectedRowsOutput>;
    deleteStaff(ctx: any, info: GraphQLResolveInfo, args: DeleteStaffArgs): Promise<Staff | null>;
    updateStaff(ctx: any, info: GraphQLResolveInfo, args: UpdateStaffArgs): Promise<Staff | null>;
    deleteManyStaff(ctx: any, info: GraphQLResolveInfo, args: DeleteManyStaffArgs): Promise<AffectedRowsOutput>;
    updateManyStaff(ctx: any, info: GraphQLResolveInfo, args: UpdateManyStaffArgs): Promise<AffectedRowsOutput>;
    upsertStaff(ctx: any, info: GraphQLResolveInfo, args: UpsertStaffArgs): Promise<Staff>;
    aggregateStaff(ctx: any, info: GraphQLResolveInfo, args: AggregateStaffArgs): Promise<AggregateStaff>;
    groupByStaff(ctx: any, info: GraphQLResolveInfo, args: GroupByStaffArgs): Promise<StaffGroupBy[]>;
}
