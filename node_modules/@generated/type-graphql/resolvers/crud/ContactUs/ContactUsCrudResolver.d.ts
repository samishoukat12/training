import { GraphQLResolveInfo } from "graphql";
import { AggregateContactUsArgs } from "./args/AggregateContactUsArgs";
import { CreateContactUsArgs } from "./args/CreateContactUsArgs";
import { CreateManyContactUsArgs } from "./args/CreateManyContactUsArgs";
import { DeleteContactUsArgs } from "./args/DeleteContactUsArgs";
import { DeleteManyContactUsArgs } from "./args/DeleteManyContactUsArgs";
import { FindFirstContactUsArgs } from "./args/FindFirstContactUsArgs";
import { FindManyContactUsArgs } from "./args/FindManyContactUsArgs";
import { FindUniqueContactUsArgs } from "./args/FindUniqueContactUsArgs";
import { GroupByContactUsArgs } from "./args/GroupByContactUsArgs";
import { UpdateContactUsArgs } from "./args/UpdateContactUsArgs";
import { UpdateManyContactUsArgs } from "./args/UpdateManyContactUsArgs";
import { UpsertContactUsArgs } from "./args/UpsertContactUsArgs";
import { ContactUs } from "../../../models/ContactUs";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateContactUs } from "../../outputs/AggregateContactUs";
import { ContactUsGroupBy } from "../../outputs/ContactUsGroupBy";
export declare class ContactUsCrudResolver {
    contactUs(ctx: any, info: GraphQLResolveInfo, args: FindUniqueContactUsArgs): Promise<ContactUs | null>;
    findFirstContactUs(ctx: any, info: GraphQLResolveInfo, args: FindFirstContactUsArgs): Promise<ContactUs | null>;
    contactuses(ctx: any, info: GraphQLResolveInfo, args: FindManyContactUsArgs): Promise<ContactUs[]>;
    createContactUs(ctx: any, info: GraphQLResolveInfo, args: CreateContactUsArgs): Promise<ContactUs>;
    createManyContactUs(ctx: any, info: GraphQLResolveInfo, args: CreateManyContactUsArgs): Promise<AffectedRowsOutput>;
    deleteContactUs(ctx: any, info: GraphQLResolveInfo, args: DeleteContactUsArgs): Promise<ContactUs | null>;
    updateContactUs(ctx: any, info: GraphQLResolveInfo, args: UpdateContactUsArgs): Promise<ContactUs | null>;
    deleteManyContactUs(ctx: any, info: GraphQLResolveInfo, args: DeleteManyContactUsArgs): Promise<AffectedRowsOutput>;
    updateManyContactUs(ctx: any, info: GraphQLResolveInfo, args: UpdateManyContactUsArgs): Promise<AffectedRowsOutput>;
    upsertContactUs(ctx: any, info: GraphQLResolveInfo, args: UpsertContactUsArgs): Promise<ContactUs>;
    aggregateContactUs(ctx: any, info: GraphQLResolveInfo, args: AggregateContactUsArgs): Promise<AggregateContactUs>;
    groupByContactUs(ctx: any, info: GraphQLResolveInfo, args: GroupByContactUsArgs): Promise<ContactUsGroupBy[]>;
}
