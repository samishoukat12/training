"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContactUsCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateContactUsArgs_1 = require("./args/AggregateContactUsArgs");
const CreateContactUsArgs_1 = require("./args/CreateContactUsArgs");
const CreateManyContactUsArgs_1 = require("./args/CreateManyContactUsArgs");
const DeleteContactUsArgs_1 = require("./args/DeleteContactUsArgs");
const DeleteManyContactUsArgs_1 = require("./args/DeleteManyContactUsArgs");
const FindFirstContactUsArgs_1 = require("./args/FindFirstContactUsArgs");
const FindManyContactUsArgs_1 = require("./args/FindManyContactUsArgs");
const FindUniqueContactUsArgs_1 = require("./args/FindUniqueContactUsArgs");
const GroupByContactUsArgs_1 = require("./args/GroupByContactUsArgs");
const UpdateContactUsArgs_1 = require("./args/UpdateContactUsArgs");
const UpdateManyContactUsArgs_1 = require("./args/UpdateManyContactUsArgs");
const UpsertContactUsArgs_1 = require("./args/UpsertContactUsArgs");
const helpers_1 = require("../../../helpers");
const ContactUs_1 = require("../../../models/ContactUs");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateContactUs_1 = require("../../outputs/AggregateContactUs");
const ContactUsGroupBy_1 = require("../../outputs/ContactUsGroupBy");
let ContactUsCrudResolver = class ContactUsCrudResolver {
    async contactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstContactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async contactuses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createContactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyContactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteContactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateContactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyContactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyContactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertContactUs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateContactUs(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByContactUs(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).contactUs.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => ContactUs_1.ContactUs, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueContactUsArgs_1.FindUniqueContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "contactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => ContactUs_1.ContactUs, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstContactUsArgs_1.FindFirstContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "findFirstContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [ContactUs_1.ContactUs], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyContactUsArgs_1.FindManyContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "contactuses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => ContactUs_1.ContactUs, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateContactUsArgs_1.CreateContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "createContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyContactUsArgs_1.CreateManyContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "createManyContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => ContactUs_1.ContactUs, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteContactUsArgs_1.DeleteContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "deleteContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => ContactUs_1.ContactUs, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateContactUsArgs_1.UpdateContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "updateContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyContactUsArgs_1.DeleteManyContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "deleteManyContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyContactUsArgs_1.UpdateManyContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "updateManyContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => ContactUs_1.ContactUs, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertContactUsArgs_1.UpsertContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "upsertContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateContactUs_1.AggregateContactUs, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateContactUsArgs_1.AggregateContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "aggregateContactUs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [ContactUsGroupBy_1.ContactUsGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByContactUsArgs_1.GroupByContactUsArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], ContactUsCrudResolver.prototype, "groupByContactUs", null);
ContactUsCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => ContactUs_1.ContactUs)
], ContactUsCrudResolver);
exports.ContactUsCrudResolver = ContactUsCrudResolver;
