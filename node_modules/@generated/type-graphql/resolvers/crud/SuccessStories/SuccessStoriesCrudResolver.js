"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuccessStoriesCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateSuccessStoriesArgs_1 = require("./args/AggregateSuccessStoriesArgs");
const CreateManySuccessStoriesArgs_1 = require("./args/CreateManySuccessStoriesArgs");
const CreateSuccessStoriesArgs_1 = require("./args/CreateSuccessStoriesArgs");
const DeleteManySuccessStoriesArgs_1 = require("./args/DeleteManySuccessStoriesArgs");
const DeleteSuccessStoriesArgs_1 = require("./args/DeleteSuccessStoriesArgs");
const FindFirstSuccessStoriesArgs_1 = require("./args/FindFirstSuccessStoriesArgs");
const FindManySuccessStoriesArgs_1 = require("./args/FindManySuccessStoriesArgs");
const FindUniqueSuccessStoriesArgs_1 = require("./args/FindUniqueSuccessStoriesArgs");
const GroupBySuccessStoriesArgs_1 = require("./args/GroupBySuccessStoriesArgs");
const UpdateManySuccessStoriesArgs_1 = require("./args/UpdateManySuccessStoriesArgs");
const UpdateSuccessStoriesArgs_1 = require("./args/UpdateSuccessStoriesArgs");
const UpsertSuccessStoriesArgs_1 = require("./args/UpsertSuccessStoriesArgs");
const helpers_1 = require("../../../helpers");
const SuccessStories_1 = require("../../../models/SuccessStories");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateSuccessStories_1 = require("../../outputs/AggregateSuccessStories");
const SuccessStoriesGroupBy_1 = require("../../outputs/SuccessStoriesGroupBy");
let SuccessStoriesCrudResolver = class SuccessStoriesCrudResolver {
    async findUniqueSuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstSuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManySuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createSuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManySuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteSuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateSuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManySuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManySuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertSuccessStories(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateSuccessStories(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupBySuccessStories(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).successStories.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => SuccessStories_1.SuccessStories, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueSuccessStoriesArgs_1.FindUniqueSuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "findUniqueSuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => SuccessStories_1.SuccessStories, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstSuccessStoriesArgs_1.FindFirstSuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "findFirstSuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [SuccessStories_1.SuccessStories], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManySuccessStoriesArgs_1.FindManySuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "findManySuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => SuccessStories_1.SuccessStories, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateSuccessStoriesArgs_1.CreateSuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "createSuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManySuccessStoriesArgs_1.CreateManySuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "createManySuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => SuccessStories_1.SuccessStories, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteSuccessStoriesArgs_1.DeleteSuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "deleteSuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => SuccessStories_1.SuccessStories, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateSuccessStoriesArgs_1.UpdateSuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "updateSuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManySuccessStoriesArgs_1.DeleteManySuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "deleteManySuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManySuccessStoriesArgs_1.UpdateManySuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "updateManySuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => SuccessStories_1.SuccessStories, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertSuccessStoriesArgs_1.UpsertSuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "upsertSuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateSuccessStories_1.AggregateSuccessStories, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateSuccessStoriesArgs_1.AggregateSuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "aggregateSuccessStories", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [SuccessStoriesGroupBy_1.SuccessStoriesGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupBySuccessStoriesArgs_1.GroupBySuccessStoriesArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], SuccessStoriesCrudResolver.prototype, "groupBySuccessStories", null);
SuccessStoriesCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => SuccessStories_1.SuccessStories)
], SuccessStoriesCrudResolver);
exports.SuccessStoriesCrudResolver = SuccessStoriesCrudResolver;
