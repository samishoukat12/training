import { GraphQLResolveInfo } from "graphql";
import { AggregateSuccessStoriesArgs } from "./args/AggregateSuccessStoriesArgs";
import { CreateManySuccessStoriesArgs } from "./args/CreateManySuccessStoriesArgs";
import { CreateSuccessStoriesArgs } from "./args/CreateSuccessStoriesArgs";
import { DeleteManySuccessStoriesArgs } from "./args/DeleteManySuccessStoriesArgs";
import { DeleteSuccessStoriesArgs } from "./args/DeleteSuccessStoriesArgs";
import { FindFirstSuccessStoriesArgs } from "./args/FindFirstSuccessStoriesArgs";
import { FindManySuccessStoriesArgs } from "./args/FindManySuccessStoriesArgs";
import { FindUniqueSuccessStoriesArgs } from "./args/FindUniqueSuccessStoriesArgs";
import { GroupBySuccessStoriesArgs } from "./args/GroupBySuccessStoriesArgs";
import { UpdateManySuccessStoriesArgs } from "./args/UpdateManySuccessStoriesArgs";
import { UpdateSuccessStoriesArgs } from "./args/UpdateSuccessStoriesArgs";
import { UpsertSuccessStoriesArgs } from "./args/UpsertSuccessStoriesArgs";
import { SuccessStories } from "../../../models/SuccessStories";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSuccessStories } from "../../outputs/AggregateSuccessStories";
import { SuccessStoriesGroupBy } from "../../outputs/SuccessStoriesGroupBy";
export declare class SuccessStoriesCrudResolver {
    findUniqueSuccessStories(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSuccessStoriesArgs): Promise<SuccessStories | null>;
    findFirstSuccessStories(ctx: any, info: GraphQLResolveInfo, args: FindFirstSuccessStoriesArgs): Promise<SuccessStories | null>;
    findManySuccessStories(ctx: any, info: GraphQLResolveInfo, args: FindManySuccessStoriesArgs): Promise<SuccessStories[]>;
    createSuccessStories(ctx: any, info: GraphQLResolveInfo, args: CreateSuccessStoriesArgs): Promise<SuccessStories>;
    createManySuccessStories(ctx: any, info: GraphQLResolveInfo, args: CreateManySuccessStoriesArgs): Promise<AffectedRowsOutput>;
    deleteSuccessStories(ctx: any, info: GraphQLResolveInfo, args: DeleteSuccessStoriesArgs): Promise<SuccessStories | null>;
    updateSuccessStories(ctx: any, info: GraphQLResolveInfo, args: UpdateSuccessStoriesArgs): Promise<SuccessStories | null>;
    deleteManySuccessStories(ctx: any, info: GraphQLResolveInfo, args: DeleteManySuccessStoriesArgs): Promise<AffectedRowsOutput>;
    updateManySuccessStories(ctx: any, info: GraphQLResolveInfo, args: UpdateManySuccessStoriesArgs): Promise<AffectedRowsOutput>;
    upsertSuccessStories(ctx: any, info: GraphQLResolveInfo, args: UpsertSuccessStoriesArgs): Promise<SuccessStories>;
    aggregateSuccessStories(ctx: any, info: GraphQLResolveInfo, args: AggregateSuccessStoriesArgs): Promise<AggregateSuccessStories>;
    groupBySuccessStories(ctx: any, info: GraphQLResolveInfo, args: GroupBySuccessStoriesArgs): Promise<SuccessStoriesGroupBy[]>;
}
