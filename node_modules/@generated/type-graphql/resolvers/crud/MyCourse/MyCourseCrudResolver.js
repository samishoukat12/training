"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MyCourseCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateMyCourseArgs_1 = require("./args/AggregateMyCourseArgs");
const CreateManyMyCourseArgs_1 = require("./args/CreateManyMyCourseArgs");
const CreateMyCourseArgs_1 = require("./args/CreateMyCourseArgs");
const DeleteManyMyCourseArgs_1 = require("./args/DeleteManyMyCourseArgs");
const DeleteMyCourseArgs_1 = require("./args/DeleteMyCourseArgs");
const FindFirstMyCourseArgs_1 = require("./args/FindFirstMyCourseArgs");
const FindManyMyCourseArgs_1 = require("./args/FindManyMyCourseArgs");
const FindUniqueMyCourseArgs_1 = require("./args/FindUniqueMyCourseArgs");
const GroupByMyCourseArgs_1 = require("./args/GroupByMyCourseArgs");
const UpdateManyMyCourseArgs_1 = require("./args/UpdateManyMyCourseArgs");
const UpdateMyCourseArgs_1 = require("./args/UpdateMyCourseArgs");
const UpsertMyCourseArgs_1 = require("./args/UpsertMyCourseArgs");
const helpers_1 = require("../../../helpers");
const MyCourse_1 = require("../../../models/MyCourse");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateMyCourse_1 = require("../../outputs/AggregateMyCourse");
const MyCourseGroupBy_1 = require("../../outputs/MyCourseGroupBy");
let MyCourseCrudResolver = class MyCourseCrudResolver {
    async myCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstMyCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async myCourses(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createMyCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyMyCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteMyCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateMyCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyMyCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyMyCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertMyCourse(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateMyCourse(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByMyCourse(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCourse.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => MyCourse_1.MyCourse, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueMyCourseArgs_1.FindUniqueMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "myCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => MyCourse_1.MyCourse, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstMyCourseArgs_1.FindFirstMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "findFirstMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [MyCourse_1.MyCourse], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyMyCourseArgs_1.FindManyMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "myCourses", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => MyCourse_1.MyCourse, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateMyCourseArgs_1.CreateMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "createMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyMyCourseArgs_1.CreateManyMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "createManyMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => MyCourse_1.MyCourse, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteMyCourseArgs_1.DeleteMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "deleteMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => MyCourse_1.MyCourse, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateMyCourseArgs_1.UpdateMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "updateMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyMyCourseArgs_1.DeleteManyMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "deleteManyMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyMyCourseArgs_1.UpdateManyMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "updateManyMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => MyCourse_1.MyCourse, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertMyCourseArgs_1.UpsertMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "upsertMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateMyCourse_1.AggregateMyCourse, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateMyCourseArgs_1.AggregateMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "aggregateMyCourse", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [MyCourseGroupBy_1.MyCourseGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByMyCourseArgs_1.GroupByMyCourseArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCourseCrudResolver.prototype, "groupByMyCourse", null);
MyCourseCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => MyCourse_1.MyCourse)
], MyCourseCrudResolver);
exports.MyCourseCrudResolver = MyCourseCrudResolver;
