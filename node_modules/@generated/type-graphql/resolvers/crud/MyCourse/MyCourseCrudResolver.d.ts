import { GraphQLResolveInfo } from "graphql";
import { AggregateMyCourseArgs } from "./args/AggregateMyCourseArgs";
import { CreateManyMyCourseArgs } from "./args/CreateManyMyCourseArgs";
import { CreateMyCourseArgs } from "./args/CreateMyCourseArgs";
import { DeleteManyMyCourseArgs } from "./args/DeleteManyMyCourseArgs";
import { DeleteMyCourseArgs } from "./args/DeleteMyCourseArgs";
import { FindFirstMyCourseArgs } from "./args/FindFirstMyCourseArgs";
import { FindManyMyCourseArgs } from "./args/FindManyMyCourseArgs";
import { FindUniqueMyCourseArgs } from "./args/FindUniqueMyCourseArgs";
import { GroupByMyCourseArgs } from "./args/GroupByMyCourseArgs";
import { UpdateManyMyCourseArgs } from "./args/UpdateManyMyCourseArgs";
import { UpdateMyCourseArgs } from "./args/UpdateMyCourseArgs";
import { UpsertMyCourseArgs } from "./args/UpsertMyCourseArgs";
import { MyCourse } from "../../../models/MyCourse";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateMyCourse } from "../../outputs/AggregateMyCourse";
import { MyCourseGroupBy } from "../../outputs/MyCourseGroupBy";
export declare class MyCourseCrudResolver {
    myCourse(ctx: any, info: GraphQLResolveInfo, args: FindUniqueMyCourseArgs): Promise<MyCourse | null>;
    findFirstMyCourse(ctx: any, info: GraphQLResolveInfo, args: FindFirstMyCourseArgs): Promise<MyCourse | null>;
    myCourses(ctx: any, info: GraphQLResolveInfo, args: FindManyMyCourseArgs): Promise<MyCourse[]>;
    createMyCourse(ctx: any, info: GraphQLResolveInfo, args: CreateMyCourseArgs): Promise<MyCourse>;
    createManyMyCourse(ctx: any, info: GraphQLResolveInfo, args: CreateManyMyCourseArgs): Promise<AffectedRowsOutput>;
    deleteMyCourse(ctx: any, info: GraphQLResolveInfo, args: DeleteMyCourseArgs): Promise<MyCourse | null>;
    updateMyCourse(ctx: any, info: GraphQLResolveInfo, args: UpdateMyCourseArgs): Promise<MyCourse | null>;
    deleteManyMyCourse(ctx: any, info: GraphQLResolveInfo, args: DeleteManyMyCourseArgs): Promise<AffectedRowsOutput>;
    updateManyMyCourse(ctx: any, info: GraphQLResolveInfo, args: UpdateManyMyCourseArgs): Promise<AffectedRowsOutput>;
    upsertMyCourse(ctx: any, info: GraphQLResolveInfo, args: UpsertMyCourseArgs): Promise<MyCourse>;
    aggregateMyCourse(ctx: any, info: GraphQLResolveInfo, args: AggregateMyCourseArgs): Promise<AggregateMyCourse>;
    groupByMyCourse(ctx: any, info: GraphQLResolveInfo, args: GroupByMyCourseArgs): Promise<MyCourseGroupBy[]>;
}
