"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MyCartCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateMyCartArgs_1 = require("./args/AggregateMyCartArgs");
const CreateManyMyCartArgs_1 = require("./args/CreateManyMyCartArgs");
const CreateMyCartArgs_1 = require("./args/CreateMyCartArgs");
const DeleteManyMyCartArgs_1 = require("./args/DeleteManyMyCartArgs");
const DeleteMyCartArgs_1 = require("./args/DeleteMyCartArgs");
const FindFirstMyCartArgs_1 = require("./args/FindFirstMyCartArgs");
const FindManyMyCartArgs_1 = require("./args/FindManyMyCartArgs");
const FindUniqueMyCartArgs_1 = require("./args/FindUniqueMyCartArgs");
const GroupByMyCartArgs_1 = require("./args/GroupByMyCartArgs");
const UpdateManyMyCartArgs_1 = require("./args/UpdateManyMyCartArgs");
const UpdateMyCartArgs_1 = require("./args/UpdateMyCartArgs");
const UpsertMyCartArgs_1 = require("./args/UpsertMyCartArgs");
const helpers_1 = require("../../../helpers");
const MyCart_1 = require("../../../models/MyCart");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateMyCart_1 = require("../../outputs/AggregateMyCart");
const MyCartGroupBy_1 = require("../../outputs/MyCartGroupBy");
let MyCartCrudResolver = class MyCartCrudResolver {
    async myCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstMyCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async myCarts(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createMyCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyMyCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteMyCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateMyCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyMyCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyMyCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertMyCart(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateMyCart(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByMyCart(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).myCart.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => MyCart_1.MyCart, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueMyCartArgs_1.FindUniqueMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "myCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => MyCart_1.MyCart, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstMyCartArgs_1.FindFirstMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "findFirstMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [MyCart_1.MyCart], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyMyCartArgs_1.FindManyMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "myCarts", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => MyCart_1.MyCart, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateMyCartArgs_1.CreateMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "createMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyMyCartArgs_1.CreateManyMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "createManyMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => MyCart_1.MyCart, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteMyCartArgs_1.DeleteMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "deleteMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => MyCart_1.MyCart, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateMyCartArgs_1.UpdateMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "updateMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyMyCartArgs_1.DeleteManyMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "deleteManyMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyMyCartArgs_1.UpdateManyMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "updateManyMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => MyCart_1.MyCart, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertMyCartArgs_1.UpsertMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "upsertMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateMyCart_1.AggregateMyCart, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateMyCartArgs_1.AggregateMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "aggregateMyCart", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [MyCartGroupBy_1.MyCartGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByMyCartArgs_1.GroupByMyCartArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], MyCartCrudResolver.prototype, "groupByMyCart", null);
MyCartCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => MyCart_1.MyCart)
], MyCartCrudResolver);
exports.MyCartCrudResolver = MyCartCrudResolver;
