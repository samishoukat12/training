
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  cnic: 'cnic',
  address: 'address',
  phone: 'phone',
  role: 'role',
  permission: 'permission',
  emailApproval: 'emailApproval',
  successStoriesId: 'successStoriesId',
  token: 'token',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.MyCourseScalarFieldEnum = makeEnum({
  id: 'id',
  coursesId: 'coursesId',
  studentId: 'studentId',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  courseApproval: 'courseApproval',
  whyReject: 'whyReject',
  feeStatus: 'feeStatus',
  courseBatchesId: 'courseBatchesId'
});

exports.Prisma.MyCartScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  coursesId: 'coursesId',
  userId: 'userId'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  categoryName: 'categoryName',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.CoursesScalarFieldEnum = makeEnum({
  id: 'id',
  courseName: 'courseName',
  courseDesc: 'courseDesc',
  courseIntro: 'courseIntro',
  instructorId: 'instructorId',
  courseCategoryId: 'courseCategoryId',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  courseStatus: 'courseStatus',
  whatYouLearn: 'whatYouLearn',
  coursePrice: 'coursePrice'
});

exports.Prisma.LecturesScalarFieldEnum = makeEnum({
  id: 'id',
  lectureTitle: 'lectureTitle',
  lectureVideo: 'lectureVideo',
  coursesId: 'coursesId',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.CourseBatchesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  coursesId: 'coursesId',
  courseName: 'courseName',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.CourseAssignmentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  courseBatchesId: 'courseBatchesId',
  coursesId: 'coursesId',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.CourseQuizScalarFieldEnum = makeEnum({
  id: 'id',
  courseBatchesId: 'courseBatchesId',
  coursesId: 'coursesId',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.SpeakerScalarFieldEnum = makeEnum({
  id: 'id',
  speakerName: 'speakerName',
  spkearDesc: 'spkearDesc',
  spekaerImage: 'spekaerImage',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.EventsScalarFieldEnum = makeEnum({
  id: 'id',
  eventName: 'eventName',
  eventDesc: 'eventDesc',
  eventImage: 'eventImage',
  eventDate: 'eventDate',
  speakerId: 'speakerId'
});

exports.Prisma.FaqScalarFieldEnum = makeEnum({
  id: 'id',
  faqQuestion: 'faqQuestion',
  faqAnswer: 'faqAnswer',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.SuccessStoriesScalarFieldEnum = makeEnum({
  id: 'id',
  freelancingProfileUrl: 'freelancingProfileUrl',
  paymentProof: 'paymentProof',
  description: 'description',
  status: 'status',
  totalEarnedAmount: 'totalEarnedAmount',
  city: 'city',
  whyReject: 'whyReject'
});

exports.Prisma.BlogsScalarFieldEnum = makeEnum({
  id: 'id',
  blogTitle: 'blogTitle',
  blogDescription: 'blogDescription',
  createdAt: 'createdAt',
  updateAt: 'updateAt',
  featuredImage: 'featuredImage',
  commentType: 'commentType'
});

exports.Prisma.CommentsScalarFieldEnum = makeEnum({
  id: 'id',
  blogsId: 'blogsId',
  createdAt: 'createdAt',
  comment: 'comment',
  userId: 'userId'
});

exports.Prisma.ContactUsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  subject: 'subject',
  message: 'message',
  status: 'status',
  reply: 'reply'
});

exports.Prisma.AttendenceScalarFieldEnum = makeEnum({
  id: 'id',
  attendence: 'attendence',
  date: 'date',
  userId: 'userId'
});

exports.Prisma.FeesScalarFieldEnum = makeEnum({
  id: 'id',
  amountPaid: 'amountPaid',
  remainingAmount: 'remainingAmount',
  studentId: 'studentId',
  studentName: 'studentName',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
});

exports.Prisma.EnrollmentApprovalScalarFieldEnum = makeEnum({
  id: 'id',
  studentName: 'studentName',
  email: 'email',
  course: 'course',
  paymentMethod: 'paymentMethod',
  amount: 'amount',
  transactionId: 'transactionId',
  status: 'status'
});

exports.Prisma.StudentsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  status: 'status'
});

exports.Prisma.StaffScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  role: 'role',
  phone: 'phone'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Role = makeEnum({
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN',
  SUPERADMIN: 'SUPERADMIN'
});

exports.Permission = makeEnum({
  FULL: 'FULL',
  FEESECTION: 'FEESECTION',
  BLOK: 'BLOK',
  UNBLOK: 'UNBLOK'
});

exports.FeeStatus = makeEnum({
  PAID: 'PAID',
  HALFPAID: 'HALFPAID',
  PENDING: 'PENDING'
});

exports.Status = makeEnum({
  PUBLISH: 'PUBLISH',
  UNPUBLISH: 'UNPUBLISH'
});

exports.ContactUsStatus = makeEnum({
  UNSEEN: 'UNSEEN',
  CONTACTED: 'CONTACTED',
  DECLINE: 'DECLINE',
  USEFUL: 'USEFUL'
});

exports.EnrollStatus = makeEnum({
  APPROVED: 'APPROVED',
  PENDING: 'PENDING',
  REJECT: 'REJECT'
});

exports.StudentStatus = makeEnum({
  ACTIVE: 'ACTIVE',
  OFFLINE: 'OFFLINE'
});

exports.StaffRole = makeEnum({
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  MyCourse: 'MyCourse',
  MyCart: 'MyCart',
  Category: 'Category',
  Courses: 'Courses',
  Lectures: 'Lectures',
  CourseBatches: 'CourseBatches',
  CourseAssignment: 'CourseAssignment',
  CourseQuiz: 'CourseQuiz',
  Speaker: 'Speaker',
  Events: 'Events',
  Faq: 'Faq',
  SuccessStories: 'SuccessStories',
  blogs: 'blogs',
  Comments: 'Comments',
  ContactUs: 'ContactUs',
  Attendence: 'Attendence',
  Fees: 'Fees',
  EnrollmentApproval: 'EnrollmentApproval',
  Students: 'Students',
  Staff: 'Staff'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
