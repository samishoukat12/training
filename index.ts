import "reflect-metadata";
import { buildSchema, NonEmptyArray } from "type-graphql";
import { ApolloServer, ExpressContext } from "apollo-server-express";
import { PrismaClient } from "@prisma/client";
const { graphqlHTTP } = require('express-graphql');

// import { resolvers } from "@generated/type-graphql";
import Container from "typedi";
import { UserContext } from "./src/graphql/types/user-context";
import express from "express";
import {
  applyResolversEnhanceMap,
  applyRelationResolversEnhanceMap,
} from '@generated/type-graphql';
import {
  getAutogeneratedResolvers,
  relationResolversEnhanceMap,
  resolversEnhanceMap,
  AutogeneratedCreateResolver,
  AutogeneratedDeleteResolver,
  AutogeneratedUpdateResolver,
} from "./src/graphql/resolvers/autogenerated-resolvers";
import { AuthService } from "./src/graphql/services/auth-service";
import { AuthResolver } from "./src/graphql/resolvers/auth-resolver";
import { prismaToken } from "./src/graphql/types/typedi-tokens";
const PORT = process.env.port || 3000;
const prisma = new PrismaClient();

Container.set(prismaToken, prisma);
applyResolversEnhanceMap(resolversEnhanceMap);
applyRelationResolversEnhanceMap(relationResolversEnhanceMap);
async function main() {
  const authService = Container.get(AuthService);

  const schema = await buildSchema({
    resolvers: [
      ...getAutogeneratedResolvers(),
      ...AutogeneratedCreateResolver(),
      ...AutogeneratedUpdateResolver(),
      ...AutogeneratedDeleteResolver(),

      AuthResolver,
    ] as NonEmptyArray<Function>,
    authChecker: authService.isUserAuthorized,
    container: Container,
    validate: true
  });
  const app = express();
  const apolloServer = new ApolloServer({
    schema,
    context: ({ req, res }: ExpressContext): UserContext => {
      const authHeader = req.headers.authorization || "";
      const user = authService.getUserInfo(authHeader)
      console.log("user", user);
      return { prisma, req, res, user };
    },
  });

  app.get('/', (req, res) => {
    console.log("server working")

  })
  await apolloServer.start();
  apolloServer.applyMiddleware({ app });
  app.listen(PORT, () => {

    console.log(`App listening on port ${PORT}`);
    console.log('Press Ctrl+C to quit.');
  });
}

main().catch((error) => {
  console.log("Eror", error);
});
