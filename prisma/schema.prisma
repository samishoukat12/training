// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  // output             = "../prisma/generated/type-graphql"
  // emitTranspiledCode = true
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String          @unique @db.String
  password         String
  cnic             String
  address          String          @default("")
  phone            String
  role             Role            @default(STUDENT)
  permission       Permission      @default(UNBLOK)
  courses          Courses[]
  myCart           MyCart[]
  successStory     SuccessStories? @relation(fields: [successStoriesId], references: [id])
  emailApproval    Boolean         @default(false)
  myComments       Comments[]
  attendence       Attendence[]
  fees             Fees[]
  successStoriesId String?         @db.ObjectId
  myCourse         MyCourse[]
  token            String?         @default("")
  createdAt        DateTime        @default(now())
  updateAt         DateTime        @updatedAt
}

model MyCourse {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  courses         Courses       @relation(fields: [coursesId], references: [id])
  coursesId       String        @db.ObjectId
  student         User          @relation(fields: [studentId], references: [id])
  studentId       String        @db.ObjectId
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  courseApproval  Boolean       @default(false)
  whyReject       String        @default("")
  feeStatus       FeeStatus     @default(PENDING)
  courseBatches   CourseBatches @relation(fields: [courseBatchesId], references: [id])
  courseBatchesId String        @db.ObjectId


  @@unique([coursesId, studentId])
}

enum FeeStatus {
  PAID
  HALFPAID
  PENDING
}

model MyCart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  courses   Courses  @relation(fields: [coursesId], references: [id])
  coursesId String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  SUPERADMIN
}

enum Permission {
  FULL
  FEESECTION
  BLOK
  UNBLOK
}

model Category {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String    @unique @db.String
  allCourses   Courses[]
  imageUrl     String    @default("")
  createdAt    DateTime  @default(now())
  updateAt     DateTime  @updatedAt
}

model Courses {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  courseName       String
  courseDesc       String
  courseIntro      String
  instructor       User               @relation(fields: [instructorId], references: [id])
  instructorId     String             @db.ObjectId
  courseCategory   Category           @relation(fields: [courseCategoryId], references: [id])
  courseCategoryId String             @db.ObjectId
  createdAt        DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  lectures         Lectures[]
  totalBatches     CourseBatches[]
  courseStatus     Status             @default(UNPUBLISH)
  whatYouLearn     Json[]             @map("whatYouLearn")
  assignment       CourseAssignment[]
  courseQuiz       CourseQuiz[]
  enrollList       MyCourse[]
  cartList         MyCart[]
  coursePrice      String
}

enum Status {
  PUBLISH
  UNPUBLISH
}

model Lectures {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  lectureTitle String
  lectureVideo String
  courses      Courses  @relation(fields: [coursesId], references: [id])
  coursesId    String   @db.ObjectId
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model CourseBatches {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  assignment      CourseAssignment[]
  quiz            CourseQuiz[]
  courses         Courses            @relation(fields: [coursesId, courseName], references: [id, courseName])
  coursesId       String             @db.ObjectId
  courseName      String
  createdAt       DateTime           @default(now())
  updateAt        DateTime           @updatedAt
  enrolledStudent MyCourse[]

}

model CourseAssignment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  CourseBatches   CourseBatches @relation(fields: [courseBatchesId], references: [id])
  courseBatchesId String        @db.ObjectId
  courses         Courses       @relation(fields: [coursesId], references: [id])
  coursesId       String        @db.ObjectId
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
}

model CourseQuiz {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  courseBatches   CourseBatches @relation(fields: [courseBatchesId], references: [id])
  courseBatchesId String        @db.ObjectId
  courses         Courses       @relation(fields: [coursesId], references: [id])
  coursesId       String        @db.ObjectId
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
}

model Speaker {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  speakerName  String
  spkearDesc   String
  spekaerImage String
  events       Events[]
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model Events {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  eventName  String
  eventDesc  String
  eventImage String?
  eventDate  DateTime
  Speaker    Speaker  @relation(fields: [speakerId], references: [id])
  speakerId  String   @db.ObjectId
}

model Faq {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  faqQuestion String
  faqAnswer   String
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model SuccessStories {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  freelancingProfileUrl String //freelancing profile
  paymentProof          String
  description           String
  status                Status @default(UNPUBLISH)
  totalEarnedAmount     String
  city                  String
  whyReject             String @default("")
  user                  User[]
}

model blogs {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  blogTitle       String
  blogDescription String
  createdAt       DateTime   @default(now())
  updateAt        DateTime   @updatedAt
  featuredImage   String
  commentType     Boolean
  comments        Comments[]
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  blogs     blogs    @relation(fields: [blogsId], references: [id])
  blogsId   String   @db.ObjectId
  createdAt DateTime @default(now())
  comment   String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model ContactUs {
  id      String          @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  subject String
  message String
  status  ContactUsStatus @default(UNSEEN)
  reply   String
}

enum ContactUsStatus {
  UNSEEN
  CONTACTED
  DECLINE
  USEFUL
}

model Attendence {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  attendence Boolean
  date       DateTime @db.Date
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  @@unique([userId, date])
}

model Fees {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  amountPaid      String
  remainingAmount String
  student         User     @relation(fields: [studentId, studentName], references: [id, name])
  studentId       String
  studentName     String
  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt
}

model EnrollmentApproval {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  studentName   String
  email         String       @unique @db.String
  course        String
  paymentMethod String
  amount        String
  transactionId String
  status        EnrollStatus @default(PENDING)
}

enum EnrollStatus {
  APPROVED
  PENDING
  REJECT
}

model Students {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  email  String        @unique @db.ObjectId
  status StudentStatus @default(OFFLINE)
}

enum StudentStatus {
  ACTIVE
  OFFLINE
}

model Staff {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String    @unique @db.ObjectId
  role  StaffRole @default(ADMIN)
  phone String
}

enum StaffRole {
  TEACHER
  ADMIN
}
