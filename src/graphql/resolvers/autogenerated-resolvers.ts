import {
  ResolversEnhanceMap,
  RelationResolversEnhanceMap,
  FindManyUserResolver,
  FindManyBlogsResolver,
  FindManyCommentsResolver,
  FindManyContactUsResolver,
  FindManyEventsResolver,
  FindManySuccessStoriesResolver,
  FindManyFaqResolver,
  FindManyStaffResolver,
  FindManyStudentsResolver,
  FindManyEnrollmentApprovalResolver,
  FindManyCoursesResolver,


  //Create Resolver
  CreateManyUserResolver,
  CreateManyBlogsResolver,
  CreateManyContactUsResolver,
  CreateManyEventsResolver,
  CreateManySuccessStoriesResolver,
  CreateManyStaffResolver,
  CreateManyStudentsResolver,
  CreateManyEnrollmentApprovalResolver,
  CreateManyCoursesResolver,
  CreateManyFaqResolver,

  //Update Resolvers
  UpdateManyUserResolver,
  UpdateManyCoursesResolver,
  UpdateManyBlogsResolver,
  UpdateManyContactUsResolver,
  UpdateManyEnrollmentApprovalResolver,
  UpdateManyEventsResolver,
  UpdateManyStaffResolver,
  UpdateManyStudentsResolver,
  UpdateManyFaqResolver,
  UpdateManySuccessStoriesResolver,
  //Delete Resolvers
  DeleteManyUserResolver,
  DeleteManyBlogsResolver,
  DeleteManyCoursesResolver,
  DeleteManyEventsResolver,
  DeleteManyContactUsResolver,
  DeleteManyEnrollmentApprovalResolver,
  DeleteManyStaffResolver,
  DeleteManyStudentsResolver,
  DeleteManyFaqResolver,
  DeleteManySuccessStoriesResolver



} from "@generated/type-graphql";
import { NonEmptyArray } from "type-graphql";
import Container from "typedi";
import { Authorized } from "type-graphql";

export const getAutogeneratedResolvers = (): NonEmptyArray<Function> => {
  // We have to add auto-generated resolvers to the dependency injection
  // container manually due to a breaking change with TypeDI > 0.8.0
  // https://github.com/MichalLytek/typegraphql-prisma/issues/63
  Container.set({ id: FindManyUserResolver, type: FindManyUserResolver });
  Container.set({ id: FindManyCoursesResolver, type: FindManyCoursesResolver });
  Container.set({ id: FindManyBlogsResolver, type: FindManyBlogsResolver });
  Container.set({ id: FindManyCommentsResolver, type: FindManyCommentsResolver, });
  Container.set({ id: FindManySuccessStoriesResolver, type: FindManySuccessStoriesResolver })
  Container.set({ id: FindManyEventsResolver, type: FindManyEventsResolver })
  Container.set({ id: FindManyFaqResolver, type: FindManyFaqResolver })
  Container.set({ id: FindManyStaffResolver, type: FindManyStaffResolver })
  Container.set({ id: FindManyContactUsResolver, type: FindManyContactUsResolver })
  Container.set({ id: FindManyStudentsResolver, type: FindManyStudentsResolver })
  Container.set({ id: FindManyEnrollmentApprovalResolver, type: FindManyEnrollmentApprovalResolver });









  return [
    FindManyUserResolver,
    FindManyBlogsResolver,
    FindManyCommentsResolver,
    FindManySuccessStoriesResolver,
    FindManyEventsResolver,
    FindManyFaqResolver,
    FindManyStaffResolver,
    FindManyContactUsResolver,
    FindManyStudentsResolver,
    FindManyEnrollmentApprovalResolver,
    FindManyCoursesResolver
    
  ];
};
export const AutogeneratedCreateResolver = (): NonEmptyArray<Function> => {
  Container.set({ id: CreateManyUserResolver, type: CreateManyUserResolver });
  Container.set({ id: CreateManyBlogsResolver, type: CreateManyBlogsResolver })
  Container.set({ id: CreateManyContactUsResolver, type: CreateManyContactUsResolver })
  Container.set({ id: CreateManyEventsResolver, type: CreateManyEventsResolver })
  Container.set({ id: CreateManySuccessStoriesResolver, type: CreateManySuccessStoriesResolver })
  Container.set({ id: CreateManyStaffResolver, type: CreateManyStaffResolver })
  Container.set({ id: CreateManyStudentsResolver, type: CreateManyStudentsResolver })
  Container.set({ id: CreateManyEnrollmentApprovalResolver, type: CreateManyEnrollmentApprovalResolver })
  Container.set({ id: CreateManyCoursesResolver, type: CreateManyCoursesResolver })
  Container.set({ id: CreateManyFaqResolver, type: CreateManyFaqResolver })


  return [
    CreateManyBlogsResolver,
    CreateManyUserResolver,
    CreateManyContactUsResolver,
    CreateManyEventsResolver,
    CreateManySuccessStoriesResolver,
    CreateManyStaffResolver,
    CreateManyStudentsResolver,
    CreateManyEnrollmentApprovalResolver,
    CreateManyCoursesResolver,
    CreateManyFaqResolver
  ]
}

export const AutogeneratedDeleteResolver = (): NonEmptyArray<Function> => {
  Container.set({ id: DeleteManyUserResolver, type: DeleteManyUserResolver });
  Container.set({ id: DeleteManyBlogsResolver, type: DeleteManyBlogsResolver });
  Container.set({ id: DeleteManyCoursesResolver, type: DeleteManyCoursesResolver });
  Container.set({ id: DeleteManyEventsResolver, type: DeleteManyEventsResolver });
  Container.set({ id: DeleteManyContactUsResolver, type: DeleteManyContactUsResolver });
  Container.set({ id: DeleteManyEnrollmentApprovalResolver, type: DeleteManyEnrollmentApprovalResolver });
  Container.set({ id: DeleteManyStaffResolver, type: DeleteManyStaffResolver });
  Container.set({ id: DeleteManyStudentsResolver, type: DeleteManyStudentsResolver });
  Container.set({ id: DeleteManyFaqResolver, type: DeleteManyFaqResolver });
  Container.set({ id: DeleteManySuccessStoriesResolver, type: DeleteManySuccessStoriesResolver });

  return [
    DeleteManyUserResolver,
    DeleteManyBlogsResolver,
    DeleteManyCoursesResolver,
    DeleteManyEventsResolver,
    DeleteManyContactUsResolver,
    DeleteManyEnrollmentApprovalResolver,
    DeleteManyStaffResolver,
    DeleteManyStudentsResolver,
    DeleteManyFaqResolver,
    DeleteManySuccessStoriesResolver
  ]
}
export const AutogeneratedUpdateResolver = (): NonEmptyArray<Function> => {
  Container.set({ id: UpdateManyUserResolver, type: UpdateManyUserResolver });
  Container.set({ id: UpdateManyCoursesResolver, type: UpdateManyCoursesResolver });
  Container.set({ id: UpdateManyBlogsResolver, type: UpdateManyBlogsResolver });
  Container.set({ id: UpdateManyContactUsResolver, type: UpdateManyContactUsResolver });
  Container.set({ id: UpdateManyEnrollmentApprovalResolver, type: UpdateManyEnrollmentApprovalResolver });
  Container.set({ id: UpdateManyEventsResolver, type: UpdateManyEventsResolver });
  Container.set({ id: UpdateManyStaffResolver, type: UpdateManyStaffResolver });
  Container.set({ id: UpdateManyStudentsResolver, type: UpdateManyStudentsResolver });
  Container.set({ id: UpdateManyFaqResolver, type: UpdateManyFaqResolver });
  Container.set({ id: UpdateManySuccessStoriesResolver, type: UpdateManySuccessStoriesResolver });
  return [
    UpdateManyUserResolver,
    UpdateManyCoursesResolver,
    UpdateManyBlogsResolver,
    UpdateManyContactUsResolver,
    UpdateManyEnrollmentApprovalResolver,
    UpdateManyEventsResolver,
    UpdateManyStaffResolver,
    UpdateManyStudentsResolver,
    UpdateManyFaqResolver,
    UpdateManySuccessStoriesResolver
  ]
}

// Authorization guards for auto-generated resolvers from typegraphql-prisma
// https://github.com/MichalLytek/typegraphql-prisma#additional-decorators-for-prisma-schema-resolvers
export const resolversEnhanceMap: ResolversEnhanceMap = {
  Attendence: {
    attendences: [Authorized()],
  },
  // StoreProduct: {
  //   storeProducts: [Authorized(Role.ApiKey)],
  // },
  // Product: {
  //   products: [Authorized(Role.ApiKey)],
  // },
  // Store: {
  //   createStore: [Authorized(Role.Admin)],
  //   createManyStore: [Authorized(Role.Admin)],
  //   deleteStore: [Authorized(Role.Admin)],
  //   store: [Authorized(Role.ApiKey)],
  //   stores: [Authorized(Role.ApiKey)],
  // },
  // ApiKey: {
  //   apiKeys: [Authorized(Role.Admin)],
  //   deleteManyApiKey: [Authorized(Role.Admin)],
  // },
  // Department: {
  //   department: [Authorized(Role.ApiKey)],
  //   findFirstDepartment: [Authorized(Role.ApiKey)],
  //   departments: [Authorized(Role.ApiKey)],
  //   createDepartment: [Authorized(Role.ApiKey)],
  //   createManyDepartment: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   deleteDepartment: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   updateDepartment: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   deleteManyDepartment: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   updateManyDepartment: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   upsertDepartment: [Authorized(Role.Admin)],
  //   aggregateDepartment: [Authorized(Role.Admin)],
  //   groupByDepartment: [Authorized(Role.Admin)],
  // },
  // Category: {
  //   category: [Authorized(Role.ApiKey)],
  //   findFirstCategory: [Authorized(Role.ApiKey), Authorized(Role.ApiKey)],
  //   categories: [Authorized(Role.ApiKey), Authorized(Role.ApiKey)],
  //   createCategory: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   createManyCategory: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   deleteCategory: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   updateCategory: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   deleteManyCategory: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   updateManyCategory: [Authorized(Role.Admin), Authorized(Role.ApiKey)],
  //   upsertCategory: [Authorized(Role.Admin)],
  //   aggregateCategory: [Authorized(Role.Admin)],
  //   groupByCategory: [Authorized(Role.Admin)],
  // },
  // HomescreenCard: {
  //   homescreenCards: [Authorized(Role.ApiKey)],
  // },
  // ConfigurationParameter: {
  //   findFirstConfigurationParameter: [Authorized()],
  //   configurationParameters: [Authorized()],
  // },
};

export const relationResolversEnhanceMap: RelationResolversEnhanceMap = {
  // StoreProduct: {
  //   cartItems: [Authorized(Role.Admin)],
  //   orderItems: [Authorized(Role.Admin)],
  // },
  // Store: {
  //   orders: [Authorized(Role.Admin)],
  // },
};
